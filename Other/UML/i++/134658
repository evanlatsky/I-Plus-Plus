format 221
"TinyXML" // Code::TinyXML
  revision 2
  modified_by 2 "Admin"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  cpp_h_dir "E:/Vasa/University/Courses/Third Year/CMPE 320/Final Project/i++/Code/TinyXML/"
  cpp_src_dir "E:/Vasa/University/Courses/Third Year/CMPE 320/Final Project/i++/Code/TinyXML/"
  classview 134658 "TinyXML"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 142082 "TiXmlString"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
TiXmlString is an emulation of a subset of the std::string template.
Its purpose is to allow compiling TinyXML on compilers with no or poor STL support.
Only the member functions relevant to the TinyXML project have been implemented.
The buffer allocation is made by a simplistic power of 2 like mechanism : if we increase
a string and there's no more room, we allocate a buffer twice as big as we need.
"
      class 144770 "size_type"
	visibility package stereotype "typedef" explicit_base_type "size_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 143362 // npos (<directional composition>)
	relation 143362 *-->
	  a role_name "npos" init_value "= static_cast< TiXmlString::size_type >(-1)" class_relation const_relation public
	    comment " Error value for find primitive
 = -1;"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 143362 // npos (<directional composition>)
	  b parent class_ref 144770 // size_type
      end

      operation 156930 "TiXmlString"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : rep_(&nullrep_)
	{
	};
"
	
	
	
	
	comment " TiXmlString empty constructor"
      end

      operation 157058 "TiXmlString"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 142082 // TiXmlString
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : rep_(0)
	{
		init(copy.length());
		memcpy(start(), copy.data(), length());
	};
"
	
	
	
	
	comment " TiXmlString copy constructor"
      end

      operation 157186 "TiXmlString"
	cpp_inline public explicit_return_type "TIXML_EXPLICIT"
	nparams 1
	  param in name "copy" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : rep_(0)
	{
		init( static_cast<size_type>( strlen(copy) ));
		memcpy(start(), copy, length());
	};
"
	
	
	
	
	comment " TiXmlString constructor, based on a string"
      end

      operation 157314 "TiXmlString"
	cpp_inline public explicit_return_type "TIXML_EXPLICIT"
	nparams 2
	  param in name "str" explicit_type "char"
	  param in name "len" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw}${abstract} : rep_(0)
	{
		init(len);
		memcpy(start(), str, len);
	};
"
	
	
	
	
	comment " TiXmlString constructor, based on a string"
      end

      operation 157442 "~TiXmlString"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {
		quit();
	};
"
	
	
	
	
	comment " TiXmlString destructor"
      end

      operation 157570 "operator ="
	cpp_inline public return_type class_ref 142082 // TiXmlString
	nparams 1
	  param in name "copy" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return assign( copy, (size_type)strlen(copy));
	};
"
	
	
	
	
      end

      operation 157698 "operator ="
	cpp_inline public return_type class_ref 142082 // TiXmlString
	nparams 1
	  param in name "copy" type class_ref 142082 // TiXmlString
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return assign(copy.start(), copy.length());
	};
"
	
	
	
	
      end

      operation 157826 "operator +="
	cpp_inline public return_type class_ref 142082 // TiXmlString
	nparams 1
	  param in name "suffix" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return append(suffix, static_cast<size_type>( strlen(suffix) ));
	};
"
	
	
	
	
	comment " += operator. Maps to append"
      end

      operation 157954 "operator +="
	cpp_inline public return_type class_ref 142082 // TiXmlString
	nparams 1
	  param in name "single" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return append(&single, 1);
	};
"
	
	
	
	
	comment " += operator. Maps to append"
      end

      operation 158082 "operator +="
	cpp_inline public return_type class_ref 142082 // TiXmlString
	nparams 1
	  param in name "suffix" type class_ref 142082 // TiXmlString
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return append(suffix.data(), suffix.length());
	};
"
	
	
	
	
	comment " += operator. Maps to append"
      end

      operation 158210 "c_str"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->str; };
"
	
	
	
	
	comment " Convert a TiXmlString into a null-terminated char *"
      end

      operation 158338 "data"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->str; };
"
	
	
	
	
	comment " Convert a TiXmlString into a char * (need not be null terminated)."
      end

      operation 158466 "length"
	const cpp_inline public return_type class_ref 144770 // size_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->size; };
"
	
	
	
	
	comment " Return the length of a TiXmlString"
      end

      operation 158594 "size"
	const cpp_inline public return_type class_ref 144770 // size_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->size; };
"
	
	
	
	
	comment " Alias for length()"
      end

      operation 158722 "empty"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->size == 0; };
"
	
	
	
	
	comment " Checks if a TiXmlString is empty"
      end

      operation 158850 "capacity"
	const cpp_inline public return_type class_ref 144770 // size_type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->capacity; };
"
	
	
	
	
	comment " Return capacity of string"
      end

      operation 158978 "at"
	const cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "index" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		assert( index < length() );
		return rep_->str[ index ];
	};
"
	
	
	
	
	comment " single char extraction"
      end

      operation 159106 "operator []"
	const cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "index" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		assert( index < length() );
		return rep_->str[ index ];
	};
"
	
	
	
	
	comment " [] operator"
      end

      operation 159234 "find"
	const cpp_inline public return_type class_ref 144770 // size_type
	nparams 1
	  param in name "lookup" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return find(lookup, 0);
	};
"
	
	
	
	
	comment " find a char in a string. Return TiXmlString::npos if not found"
      end

      operation 159362 "find"
	const cpp_inline public return_type class_ref 144770 // size_type
	nparams 2
	  param in name "tofind" explicit_type "char"
	  param in name "offset" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		if (offset >= length()) return npos;

		for (const char* p = c_str() + offset; *p != '\\0'; ++p)
		{
		   if (*p == tofind) return static_cast< size_type >( p - c_str() );
		}
		return npos;
	};
"
	
	
	
	
	comment " find a char in a string from an offset. Return TiXmlString::npos if not found"
      end

      operation 159490 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		//Lee:
		//The original was just too strange, though correct:
		//	TiXmlString().swap(*this);
		//Instead use the quit & re-init:
		quit();
		init(0,0);
	};
"
	
	
	
	
      end

      operation 159618 "reserve"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "cap" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Function to reserve a big amount of data when we know we'll need it. Be aware that this
function DOES NOT clear the content of the TiXmlString if any exists.
"
      end

      operation 159746 "assign"
	preserve_cpp_body_indent public return_type class_ref 142082 // TiXmlString
	nparams 2
	  param in name "str" explicit_type "char"
	  param in name "len" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 159874 "append"
	preserve_cpp_body_indent public return_type class_ref 142082 // TiXmlString
	nparams 2
	  param in name "str" explicit_type "char"
	  param in name "len" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 160002 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 142082 // TiXmlString
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		Rep* r = rep_;
		rep_ = other.rep_;
		other.rep_ = r;
	};
"
	
	
	
	
      end

      operation 160130 "init"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "sz" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { init(sz, sz); };
"
	
	
	
	
      end

      operation 160258 "set_size"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "sz" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { rep_->str[ rep_->size = sz ] = '\\0'; };
"
	
	
	
	
      end

      operation 160386 "start"
	const cpp_inline private explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->str; };
"
	
	
	
	
      end

      operation 160514 "finish"
	const cpp_inline private explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return rep_->str + rep_->size; };
"
	
	
	
	
      end

      class 144898 "Rep"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 143490 // size (<directional composition>)
	  relation 143490 *-->
	    a role_name "size" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 143490 // size (<directional composition>)
	    b parent class_ref 144770 // size_type
	end

	classrelation 143618 // capacity (<directional composition>)
	  relation 143618 *-->
	    a role_name "capacity" public
	      cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	      classrelation_ref 143618 // capacity (<directional composition>)
	    b parent class_ref 144770 // size_type
	end

	attribute 152834 "str"
	  public explicit_type "char"
	  multiplicity "[1]"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 160642 "init"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param in name "sz" type class_ref 144770 // size_type
	  param in name "cap" type class_ref 144770 // size_type
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		if (cap)
		{
			// Lee: the original form:
			//	rep_ = static_cast<Rep*>(operator new(sizeof(Rep) + cap));
			// doesn't work in some cases of new being overloaded. Switching
			// to the normal allocation, although use an 'int' for systems
			// that are overly picky about structure alignment.
			const size_type bytesNeeded = sizeof(Rep) + cap;
			const size_type intsNeeded = ( bytesNeeded + sizeof(int) - 1 ) / sizeof( int ); 
			rep_ = reinterpret_cast<Rep*>( new int[ intsNeeded ] );

			rep_->str[ rep_->size = sz ] = '\\0';
			rep_->capacity = cap;
		}
		else
		{
			rep_ = &nullrep_;
		}
	};
"
	
	
	
	
      end

      operation 160770 "quit"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		if (rep_ != &nullrep_)
		{
			// The rep_ is really an array of ints. (see the allocator, above).
			// Cast it back before delete, so the compiler won't incorrectly call destructors.
			delete [] ( reinterpret_cast<int*>( rep_ ) );
		}
	};
"
	
	
	
	
      end

      classrelation 143746 // rep_ (<unidirectional association>)
	relation 143746 --->
	  a role_name "rep_" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 143746 // rep_ (<unidirectional association>)
	  b parent class_ref 144898 // Rep
      end

      classrelation 143874 // nullrep_ (<directional composition>)
	relation 143874 *-->
	  a role_name "nullrep_" init_value "= { 0, 0, { '\\0' } }" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 143874 // nullrep_ (<directional composition>)
	  b parent class_ref 144898 // Rep
      end
    end

    class 142210 "TiXmlOutStream"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
TiXmlOutStream is an emulation of std::ostream. It is based on TiXmlString.
Only the operators that we need for TinyXML have been developped.
"
      classrelation 144002 // <generalisation>
	relation 144002 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 144002 // <generalisation>
	  b parent class_ref 142082 // TiXmlString
      end

      operation 160898 "operator <<"
	cpp_inline public return_type class_ref 142210 // TiXmlOutStream
	nparams 1
	  param in name "in" type class_ref 142082 // TiXmlString
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		*this += in;
		return *this;
	};
"
	
	
	
	
	comment " TiXmlOutStream << operator."
      end

      operation 161026 "operator <<"
	cpp_inline public return_type class_ref 142210 // TiXmlOutStream
	nparams 1
	  param in name "in" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		*this += in;
		return *this;
	};
"
	
	
	
	
	comment " TiXmlOutStream << operator."
      end
    end

    class 142338 "TiXmlCursor"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	Internal structure for tracking location of items 
in the XML file.
"
      operation 161154 "TiXmlCursor"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} { Clear(); };
"
	
	
	
	
      end

      operation 161282 "Clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { row = col = -1; };
"
	
	
	
	
      end

      attribute 152962 "row"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 0 based."
      end

      attribute 153090 "col"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " 0 based."
      end
    end

    class 142466 "TiXmlVisitor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
Implements the interface to the \"Visitor pattern\" (see the Accept() method.)
If you call the Accept() method, it requires being passed a TiXmlVisitor
class to handle callbacks. For nodes that contain other nodes (Document, Element)
you will get called with a VisitEnter/VisitExit pair. Nodes that are always leaves
are simply called with Visit().

If you return 'true' from a Visit method, recursive parsing will continue. If you return
false, <b>no children of this node or its sibilings</b> will be Visited.

All flavors of Visit methods have a default implementation that returns 'true' (continue 
visiting). You need to only override methods that are interesting to you.

Generally Accept() is called on the TiXmlDocument, although all nodes suppert Visiting.

You should never change the document from a callback.

@sa TiXmlNode::Accept()
"
      operation 161410 "~TiXmlVisitor"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 161538 "VisitEnter"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit a document."
      end

      operation 161666 "VisitExit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit a document."
      end

      operation 161794 "VisitEnter"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "" type class_ref 143106 // TiXmlElement
	  param in name "" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit an element."
      end

      operation 161922 "VisitExit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit an element."
      end

      operation 162050 "Visit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143490 // TiXmlDeclaration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit a declaration"
      end

      operation 162178 "Visit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143362 // TiXmlText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit a text node"
      end

      operation 162306 "Visit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143234 // TiXmlComment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit a comment node"
      end

      operation 162434 "Visit"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "" type class_ref 143618 // TiXmlUnknown
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return true; };
"
	
	
	
	
	comment "/ Visit an unknown node"
      end
    end

    class 142594 "TiXmlEncoding"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Used by the parsing routines."
      attribute 153602 "TIXML_ENCODING_UNKNOWN"
	public type class_ref 142594 // TiXmlEncoding
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153730 "TIXML_ENCODING_UTF8"
	public type class_ref 142594 // TiXmlEncoding
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153858 "TIXML_ENCODING_LEGACY"
	public type class_ref 142594 // TiXmlEncoding
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 142722 "TiXmlNode"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The parent class for everything in the Document Object Model.
(Except for attributes).
Nodes have siblings, a parent, and children. A node can be
in a document, or stand on its own. The type of a TiXmlNode
can be queried, and it can be cast to its more defined type.
"
      classrelation 144770 // <generalisation>
	relation 144770 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 144770 // <generalisation>
	  b parent class_ref 145154 // TiXmlBase
      end

      classrelation 144898 // <dependency>
	relation 144898 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 144898 // <dependency>
	  b parent class_ref 143746 // TiXmlDocument
      end

      classrelation 145026 // <dependency>
	relation 145026 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 145026 // <dependency>
	  b parent class_ref 143106 // TiXmlElement
      end

      operation 166146 "operator >>"
	preserve_cpp_body_indent friend public explicit_return_type "std::istream"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "base" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " An input stream operator, for every class. Tolerant of newlines and
formatting, but doesn't expect them.
"
      end

      operation 166274 "operator <<"
	preserve_cpp_body_indent friend public explicit_return_type "std::ostream"
	nparams 2
	  param inout name "out" explicit_type "std::ostream"
	  param in name "base" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " An output stream operator, for every class. Note that this outputs
without any newlines or formatting, as opposed to Print(), which
includes tabs and new lines.

The operator<< and operator>> are not completely symmetric. Writing
a node to a stream is very well defined. You'll get a nice stream
of output, without any extra whitespace or newlines.

But reading is not as well defined. (As it always is.) If you create
a TiXmlElement (for example) and read that from an input stream,
the text needs to define an element or junk will result. This is
true of all input streams, but it's worth keeping in mind.

A TiXmlDocument will read nodes until it reads a root element, and
all the children of that root element.
"
      end

      operation 166402 "operator <<"
	preserve_cpp_body_indent friend public explicit_return_type "std::string"
	nparams 2
	  param inout name "out" explicit_type "std::string"
	  param in name "base" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Appends the XML node or attribute to a std::string."
      end

      class 145666 "NodeType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 157314 "TINYXML_DOCUMENT"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157442 "TINYXML_ELEMENT"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157570 "TINYXML_COMMENT"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157698 "TINYXML_UNKNOWN"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157826 "TINYXML_TEXT"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157954 "TINYXML_DECLARATION"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 158082 "TINYXML_TYPECOUNT"
	  public type class_ref 145666 // NodeType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 166530 "~TiXmlNode"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 166658 "Value"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value.c_str (); };
"
	
	
	
	
	comment " The meaning of 'value' changes for the specific type of
TiXmlNode.
@verbatim
Document:	filename of the xml file
Element:	name of the element
Comment:	the comment text
Unknown:	the tag contents
Text:		the text string
@endverbatim

The subclasses will wrap this function.
"
      end

      operation 166786 "ValueStr"
	const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value; };
"
	
	
	
	
	comment " Return Value() as a std::string. If you only use STL,
this is more efficient than calling Value().
Only available in STL mode.
"
      end

      operation 166914 "ValueTStr"
	const cpp_inline public explicit_return_type "TIXML_STRING"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value; };
"
	
	
	
	
      end

      operation 167042 "SetValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value = _value;};
"
	
	
	
	
	comment " Changes the value of the node. Defined as:
@verbatim
Document:	filename of the xml file
Element:	name of the element
Comment:	the comment text
Unknown:	the tag contents
Text:		the text string
@endverbatim
"
      end

      operation 167170 "SetValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value = _value; };
"
	
	
	
	
	comment "/ STL std::string form."
      end

      operation 167298 "Clear"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Delete all the children of this node. Does not affect 'this'."
      end

      operation 167426 "Parent"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return parent; };
"
	
	
	
	
	comment "/ One step up the DOM."
      end

      operation 167554 "Parent"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return parent; };
"
	
	
	
	
      end

      operation 167682 "FirstChild"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return firstChild; };
"
	
	
	
	
      end

      operation 167810 "FirstChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return firstChild; };
"
	
	
	
	
	comment "/< The first child of this node. Will be null if there are no children."
      end

      operation 217602 "FirstChild"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 167938 "FirstChild"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		// Call through to the const version - safe since nothing is changed. Exiting syntax: cast this to a const (always safe)
		// call the method, cast the return back to non-const.
		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->FirstChild( _value ));
	};
"
	
	
	
	
	comment "/< The first child of this node with the matching 'value'. Will be null if none found.
/ The first child of this node with the matching 'value'. Will be null if none found."
      end

      operation 168066 "FirstChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		// Call through to the const version - safe since nothing is changed. Exiting syntax: cast this to a const (always safe)
		// call the method, cast the return back to non-const.
		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->FirstChild( _value ));
	};
"
	
	
	
	
	comment "/< The first child of this node with the matching 'value'. Will be null if none found.
/ The first child of this node with the matching 'value'. Will be null if none found."
      end

      operation 168194 "LastChild"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return lastChild; };
"
	
	
	
	
      end

      operation 168322 "LastChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return lastChild; };
"
	
	
	
	
	comment "/ The last child of this node. Will be null if there are no children."
      end

      operation 217730 "LastChild"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 168450 "LastChild"
	preserve_cpp_body_indent cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->LastChild( _value ));
	};
"
	
	
	
	
	comment "/ The last child of this node matching 'value'. Will be null if there are no children."
      end

      operation 168578 "LastChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* > ((const_cast< const TiXmlNode* >(this))->LastChild( _value ));
	};
"
	
	
	
	
	comment "/ The last child of this node matching 'value'. Will be null if there are no children."
      end

      operation 168706 "FirstChild"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return FirstChild (_value.c_str ());	};
"
	
	
	
	
      end

      operation 168834 "FirstChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return FirstChild (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 168962 "LastChild"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return LastChild (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 169090 "LastChild"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return LastChild (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 169218 "IterateChildren"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " An alternate way to walk the children of a node.
One way to iterate over nodes is:
@verbatim
for( child = parent->FirstChild(); child; child = child->NextSibling() )
@endverbatim

IterateChildren does the same thing with the syntax:
@verbatim
child = 0;
while( child = parent->IterateChildren( child ) )
@endverbatim

IterateChildren takes the previous child as input and finds
the next one. If the previous child is null, it returns the
first. IterateChildren will return null when done.
"
      end

      operation 169346 "IterateChildren"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->IterateChildren( previous ) );
	};
"
	
	
	
	
      end

      operation 217858 "IterateChildren"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "val" explicit_type "char"
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This flavor of IterateChildren searches for children with a particular 'value'"
      end

      operation 169474 "IterateChildren"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "val" explicit_type "char"
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This flavor of IterateChildren searches for children with a particular 'value'"
      end

      operation 169602 "IterateChildren"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "_value" explicit_type "char"
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->IterateChildren( _value, previous ) );
	};
"
	
	
	
	
      end

      operation 169730 "IterateChildren"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "_value" explicit_type "std::string"
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {	return IterateChildren (_value.c_str (), previous);	};
"
	
	
	
	
      end

      operation 169858 "IterateChildren"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "_value" explicit_type "std::string"
	  param in name "previous" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {	return IterateChildren (_value.c_str (), previous);	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 169986 "InsertEndChild"
	preserve_cpp_body_indent public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "addThis" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a new node related to this. Adds a child past the LastChild.
Returns a pointer to the new object or NULL if an error occured.
"
      end

      operation 170114 "LinkEndChild"
	preserve_cpp_body_indent public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param inout name "node" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a new node related to this. Adds a child past the LastChild.

NOTE: the node to be added is passed by pointer, and will be
henceforth owned (and deleted) by tinyXml. This method is efficient
and avoids an extra copy, but should be used with care as it
uses a different memory model than the other insert functions.

@sa InsertEndChild
"
      end

      operation 170242 "InsertBeforeChild"
	preserve_cpp_body_indent public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param inout name "beforeThis" type class_ref 142722 // TiXmlNode
	  param in name "addThis" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a new node related to this. Adds a child before the specified child.
Returns a pointer to the new object or NULL if an error occured.
"
      end

      operation 170370 "InsertAfterChild"
	preserve_cpp_body_indent public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param inout name "afterThis" type class_ref 142722 // TiXmlNode
	  param in name "addThis" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Add a new node related to this. Adds a child after the specified child.
Returns a pointer to the new object or NULL if an error occured.
"
      end

      operation 170498 "ReplaceChild"
	preserve_cpp_body_indent public return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param inout name "replaceThis" type class_ref 142722 // TiXmlNode
	  param in name "withThis" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Replace a child of this node.
Returns a pointer to the new object or NULL if an error occured.
"
      end

      operation 170626 "RemoveChild"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param inout name "removeThis" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Delete a child of this node."
      end

      operation 170754 "PreviousSibling"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return prev; };
"
	
	
	
	
	comment "/ Navigate to a sibling node."
      end

      operation 170882 "PreviousSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return prev; };
"
	
	
	
	
      end

      operation 217986 "PreviousSibling"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Navigate to a sibling node."
      end

      operation 171010 "PreviousSibling"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Navigate to a sibling node."
      end

      operation 171138 "PreviousSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_prev" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->PreviousSibling( _prev ) );
	};
"
	
	
	
	
      end

      operation 171266 "PreviousSibling"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return PreviousSibling (_value.c_str ());	};
"
	
	
	
	
      end

      operation 171394 "PreviousSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return PreviousSibling (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 171522 "NextSibling"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return NextSibling (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 171650 "NextSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return NextSibling (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 171778 "NextSibling"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return next; };
"
	
	
	
	
	comment "/ Navigate to a sibling node."
      end

      operation 171906 "NextSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return next; };
"
	
	
	
	
      end

      operation 218114 "NextSibling"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Navigate to a sibling node with the given 'value'."
      end

      operation 172034 "NextSibling"
	preserve_cpp_body_indent const public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Navigate to a sibling node with the given 'value'."
      end

      operation 172162 "NextSibling"
	cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 1
	  param in name "_next" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlNode* >( (const_cast< const TiXmlNode* >(this))->NextSibling( _next ) );
	};
"
	
	
	
	
      end

      operation 172290 "NextSiblingElement"
	preserve_cpp_body_indent const public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Convenience function to get through elements.
Calls NextSibling and ToElement. Will skip all non-Element
nodes. Returns 0 if there is not another element.
"
      end

      operation 172418 "NextSiblingElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement() );
	};
"
	
	
	
	
      end

      operation 218242 "NextSiblingElement"
	preserve_cpp_body_indent const public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Convenience function to get through elements.
Calls NextSibling and ToElement. Will skip all non-Element
nodes. Returns 0 if there is not another element.
"
      end

      operation 172546 "NextSiblingElement"
	preserve_cpp_body_indent const public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Convenience function to get through elements.
Calls NextSibling and ToElement. Will skip all non-Element
nodes. Returns 0 if there is not another element.
"
      end

      operation 172674 "NextSiblingElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_next" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->NextSiblingElement( _next ) );
	};
"
	
	
	
	
      end

      operation 172802 "NextSiblingElement"
	const cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return NextSiblingElement (_value.c_str ());	};
"
	
	
	
	
      end

      operation 172930 "NextSiblingElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return NextSiblingElement (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 173058 "FirstChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Convenience function to get through elements."
      end

      operation 173186 "FirstChildElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement() );
	};
"
	
	
	
	
      end

      operation 173314 "FirstChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Convenience function to get through elements."
      end

      operation 173442 "FirstChildElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlElement* >( (const_cast< const TiXmlNode* >(this))->FirstChildElement( _value ) );
	};
"
	
	
	
	
      end

      operation 173570 "FirstChildElement"
	const cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return FirstChildElement (_value.c_str ());	};
"
	
	
	
	
      end

      operation 173698 "FirstChildElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	return FirstChildElement (_value.c_str ());	};
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 173826 "Type"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return type; };
"
	
	
	
	
	comment " Query the type (as an enumerated value, above) of this node.
The possible types are: TINYXML_DOCUMENT, TINYXML_ELEMENT, TINYXML_COMMENT,
TINYXML_UNKNOWN, TINYXML_TEXT, and TINYXML_DECLARATION.
"
      end

      operation 173954 "GetDocument"
	preserve_cpp_body_indent const public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a pointer to the Document this node lives in.
Returns null if not in a document.
"
      end

      operation 174082 "GetDocument"
	cpp_inline public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlDocument* >( (const_cast< const TiXmlNode* >(this))->GetDocument() );
	};
"
	
	
	
	
      end

      operation 174210 "NoChildren"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return !firstChild; };
"
	
	
	
	
	comment "/ Returns true if this node has no children."
      end

      operation 174338 "ToDocument"
	const cpp_virtual cpp_inline public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
      end

      operation 174466 "ToElement"
	const cpp_virtual cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 174594 "ToComment"
	const cpp_virtual cpp_inline public return_type class_ref 143234 // TiXmlComment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 174722 "ToUnknown"
	const cpp_virtual cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 174850 "ToText"
	const cpp_virtual cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 174978 "ToDeclaration"
	const cpp_virtual cpp_inline public return_type class_ref 143490 // TiXmlDeclaration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175106 "ToDocument"
	cpp_virtual cpp_inline public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175234 "ToElement"
	cpp_virtual cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175362 "ToComment"
	cpp_virtual cpp_inline public return_type class_ref 143234 // TiXmlComment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175490 "ToUnknown"
	cpp_virtual cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175618 "ToText"
	cpp_virtual cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175746 "ToDeclaration"
	cpp_virtual cpp_inline public return_type class_ref 143490 // TiXmlDeclaration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return 0; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type."
      end

      operation 175874 "Clone"
	abstract const cpp_virtual public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null if not of the requested type.
 Create an exact duplicate of this node and return it. The memory must be deleted
by the caller. 
"
      end

      operation 176002 "Accept"
	abstract const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " Accept a hierchical visit the nodes in the TinyXML DOM. Every node in the 
XML tree will be conditionally visited and the host will be called back
via the TiXmlVisitor interface.

This is essentially a SAX interface for TinyXML. (Note however it doesn't re-parse
the XML for the callbacks, so the performance of TinyXML is unchanged by using this
interface versus any other.)

The interface has been based on ideas from:

- http://www.saxproject.org/
- http://c2.com/cgi/wiki?HierarchicalVisitorPattern 

Which are both good references for \"visiting\".

An example of using Accept():
@verbatim
TiXmlPrinter printer;
tinyxmlDoc.Accept( &printer );
const char* xmlcstr = printer.CStr();
@endverbatim
"
      end

      operation 176130 "TiXmlNode"
	preserve_cpp_body_indent protected explicit_return_type ""
	nparams 1
	  param in name "_type" type class_ref 145666 // NodeType
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)} : TiXmlBase()
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 176258 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Copy to the allocated object. Shared functionality between Clone, Copy constructor,
 and the assignment operator."
      end

      operation 176386 "StreamIn"
	abstract cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment " The real work of the input operator."
      end

      operation 176514 "Identify"
	preserve_cpp_body_indent protected return_type class_ref 142722 // TiXmlNode
	nparams 2
	  param in name "p" explicit_type "char"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Figure out what is at *p, and parse it. Returns null if it is not an xml node."
      end

      classrelation 145154 // parent (<unidirectional association>)
	relation 145154 --->
	  a role_name "parent" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 145154 // parent (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end

      classrelation 145282 // type (<directional composition>)
	relation 145282 *-->
	  a role_name "type" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 145282 // type (<directional composition>)
	  b parent class_ref 145666 // NodeType
      end

      classrelation 145410 // firstChild (<unidirectional association>)
	relation 145410 --->
	  a role_name "firstChild" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 145410 // firstChild (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end

      classrelation 145538 // lastChild (<unidirectional association>)
	relation 145538 --->
	  a role_name "lastChild" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 145538 // lastChild (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end

      attribute 158210 "value"
	protected explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 145666 // prev (<unidirectional association>)
	relation 145666 --->
	  a role_name "prev" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 145666 // prev (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end

      classrelation 145794 // next (<unidirectional association>)
	relation 145794 --->
	  a role_name "next" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 145794 // next (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 176642 "TiXmlNode"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 176770 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "base" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " not implemented."
      end
    end

    class 142850 "TiXmlAttribute"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " not allowed.
 An attribute is a name-value pair. Elements have an arbitrary
number of attributes, each with a unique name.

@note The attributes are not TiXmlNodes, since they are not
part of the tinyXML document object model. There are other
suggested ways to look at this problem.
"
      classrelation 145922 // <generalisation>
	relation 145922 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 145922 // <generalisation>
	  b parent class_ref 145154 // TiXmlBase
      end

      classrelation 146050 // <dependency>
	relation 146050 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 146050 // <dependency>
	  b parent class_ref 142978 // TiXmlAttributeSet
      end

      operation 176898 "TiXmlAttribute"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : TiXmlBase()
	{
		document = 0;
		prev = next = 0;
	};
"
	
	
	
	
	comment "/ Construct an empty attribute."
      end

      operation 177026 "TiXmlAttribute"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "_name" explicit_type "std::string"
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw}${abstract} {
		name = _name;
		value = _value;
		document = 0;
		prev = next = 0;
	};
"
	
	
	
	
	comment "/ std::string constructor."
      end

      operation 177154 "TiXmlAttribute"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "_name" explicit_type "char"
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw}${abstract} {
		name = _name;
		value = _value;
		document = 0;
		prev = next = 0;
	};
"
	
	
	
	
	comment "/ Construct an attribute with a name and value."
      end

      operation 177282 "Name"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return name.c_str(); };
"
	
	
	
	
      end

      operation 177410 "Value"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value.c_str(); };
"
	
	
	
	
	comment "/< Return the name of this attribute."
      end

      operation 177538 "ValueStr"
	const cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value; };
"
	
	
	
	
      end

      operation 177666 "IntValue"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 177794 "DoubleValue"
	preserve_cpp_body_indent const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Return the value of this attribute, converted to an integer."
      end

      operation 177922 "NameTStr"
	const cpp_inline public explicit_return_type "TIXML_STRING"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return name; };
"
	
	
	
	
	comment "/< Return the value of this attribute, converted to a double.
 Get the tinyxml string representation"
      end

      operation 178050 "QueryIntValue"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 1
	  param inout name "ival" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " QueryIntValue examines the value string. It is an alternative to the
IntValue() method with richer error checking.
If the value is an integer, it is stored in 'value' and 
the call returns TIXML_SUCCESS. If it is not
an integer, it returns TIXML_WRONG_TYPE.

A specialized but useful call. Note that for success it returns 0,
which is the opposite of almost all other TinyXml calls.
"
      end

      operation 178178 "QueryDoubleValue"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 1
	  param inout name "dval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ QueryDoubleValue examines the value string. See QueryIntValue()."
      end

      operation 178306 "SetName"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { name = _name; };
"
	
	
	
	
      end

      operation 178434 "SetValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value = _value; };
"
	
	
	
	
	comment "/< Set the name of this attribute."
      end

      operation 178562 "SetIntValue"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Set the value."
      end

      operation 178690 "SetDoubleValue"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Set the value from an integer."
      end

      operation 178818 "SetName"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { name = _name; };
"
	
	
	
	
	comment "/ STL std::string form."
      end

      operation 178946 "SetValue"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { value = _value; };
"
	
	
	
	
	comment "/ STL std::string form.	"
      end

      operation 179074 "Next"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Get the next sibling attribute in the DOM. Returns null at end."
      end

      operation 179202 "Next"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttribute* >(this))->Next() ); 
	};
"
	
	
	
	
      end

      operation 179330 "Previous"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//
//TiXmlAttribute* TiXmlAttribute::Next()
//{
//// We are using knowledge of the sentinel. The sentinel
//// have a value or name.
//if ( next->value.empty() && next->name.empty() )
//return 0;
//return next;
//}
//

${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Get the previous sibling attribute in the DOM. Returns null at beginning."
      end

      operation 179458 "Previous"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		return const_cast< TiXmlAttribute* >( (const_cast< const TiXmlAttribute* >(this))->Previous() ); 
	};
"
	
	
	
	
      end

      operation 179586 "operator =="
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return rhs.name == name; };
"
	
	
	
	
      end

      operation 179714 "operator <"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return name < rhs.name; };
"
	
	
	
	
      end

      operation 179842 "operator >"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "rhs" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return name > rhs.name; };
"
	
	
	
	
      end

      operation 179970 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Attribute parsing starts: first letter of the name
returns: the next char after the value end quote
"
      end

      operation 180098 "Print"
	const cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		Print( cfile, depth, 0 );
	};
"
	
	
	
	
	comment " Prints this Attribute to a FILE stream."
      end

      operation 180226 "Print"
	preserve_cpp_body_indent const public explicit_return_type "void"
	nparams 3
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	  param inout name "str" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//
//TiXmlAttribute* TiXmlAttribute::Previous()
//{
//// We are using knowledge of the sentinel. The sentinel
//// have a value or name.
//if ( prev->value.empty() && prev->name.empty() )
//return 0;
//return prev;
//}
//

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 180354 "SetDocument"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "doc" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { document = doc; };
"
	
	
	
	
	comment " [internal use]
 Set the document pointer so the attribute can report errors."
      end

      operation 180482 "TiXmlAttribute"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 180610 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "base" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " not implemented."
      end

      classrelation 146178 // document (<unidirectional association>)
	relation 146178 --->
	  a role_name "document" private
	    comment " not allowed.
 A pointer back to a document, for error reporting."
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 146178 // document (<unidirectional association>)
	  b parent class_ref 143746 // TiXmlDocument
      end

      attribute 158338 "name"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158466 "value"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 146306 // prev (<unidirectional association>)
	relation 146306 --->
	  a role_name "prev" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 146306 // prev (<unidirectional association>)
	  b parent class_ref 142850 // TiXmlAttribute
      end

      classrelation 146434 // next (<unidirectional association>)
	relation 146434 --->
	  a role_name "next" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 146434 // next (<unidirectional association>)
	  b parent class_ref 142850 // TiXmlAttribute
      end
    end

    class 142978 "TiXmlAttributeSet"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	A class used to manage a group of attributes.
It is only used internally, both by the ELEMENT and the DECLARATION.

The set can be changed transparent to the Element and Declaration
classes that use it, but NOT transparent to the Attribute
which has to implement a next() and previous() method. Which makes
it a bit problematic and prevents the use of STL.

This version is implemented with circular lists because:
- I like circular lists
- it demonstrates some independence from the (typical) doubly linked list.
"
      operation 180738 "TiXmlAttributeSet"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 180866 "~TiXmlAttributeSet"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 180994 "Add"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "addMe" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 181122 "Remove"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param inout name "removeMe" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 181250 "First"
	const cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; };
"
	
	
	
	
      end

      operation 181378 "First"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; };
"
	
	
	
	
      end

      operation 181506 "Last"
	const cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; };
"
	
	
	
	
      end

      operation 181634 "Last"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; };
"
	
	
	
	
      end

      operation 218370 "Find"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 181762 "Find"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 181890 "FindOrCreate"
	preserve_cpp_body_indent public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "_name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 218498 "Find"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 182018 "Find"
	preserve_cpp_body_indent const public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 182146 "FindOrCreate"
	preserve_cpp_body_indent public return_type class_ref 142850 // TiXmlAttribute
	nparams 1
	  param in name "_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 182274 "TiXmlAttributeSet"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 142978 // TiXmlAttributeSet
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "*ME:	Because of hidden/disabled copy-construktor in TiXmlAttribute (sentinel-element),
*ME:	this class must be also use a hidden/disabled copy-constructor !!!"
      end

      operation 182402 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "" type class_ref 142978 // TiXmlAttributeSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " not allowed"
      end

      classrelation 146562 // sentinel (<directional composition>)
	relation 146562 *-->
	  a role_name "sentinel" private
	    comment " not allowed (as TiXmlAttribute)
"
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 146562 // sentinel (<directional composition>)
	  b parent class_ref 142850 // TiXmlAttribute
      end
    end

    class 143106 "TiXmlElement"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The element is a container class. It has a value, the element name,
and can contain other elements, text, comments, and unknowns.
Elements also contain an arbitrary number of attributes.
"
      classrelation 146690 // <generalisation>
	relation 146690 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 146690 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 218626 "TiXmlElement"
	public explicit_return_type ""
	nparams 1
	  param in name "in_value" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
	comment "/ Construct an element."
      end

      operation 182530 "TiXmlElement"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}
	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )

	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )

	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Construct an element."
      end

      operation 182658 "TiXmlElement"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} 
	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ std::string constructor."
      end

      operation 218754 "TiXmlElement"
	public explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 182786 "TiXmlElement"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )

	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )

	: TiXmlNode( TiXmlNode::TINYXML_ELEMENT )
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 182914 "operator ="
	preserve_cpp_body_indent public return_type class_ref 143106 // TiXmlElement
	nparams 1
	  param in name "base" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 183042 "~TiXmlElement"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 183170 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Given an attribute name, Attribute() returns the value
for the attribute of that name, or null if none exists.
"
      end

      operation 183298 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Given an attribute name, Attribute() returns the value
for the attribute of that name, or null if none exists.
If the attribute exists and can be converted to an integer,
the integer value will be put in the return 'i', if 'i'
is non-null.
"
      end

      operation 183426 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Given an attribute name, Attribute() returns the value
for the attribute of that name, or null if none exists.
If the attribute exists and can be converted to an double,
the double value will be put in the return 'd', if 'd'
is non-null.
"
      end

      operation 218882 "QueryIntAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "ival" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " QueryIntAttribute examines the attribute - it is an alternative to the
Attribute() method with richer error checking.
If the attribute is an integer, it is stored in 'value' and 
the call returns TIXML_SUCCESS. If it is not
an integer, it returns TIXML_WRONG_TYPE. If the attribute
does not exist, then TIXML_NO_ATTRIBUTE is returned.
"
      end

      operation 183554 "QueryIntAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "ival" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " QueryIntAttribute examines the attribute - it is an alternative to the
Attribute() method with richer error checking.
If the attribute is an integer, it is stored in 'value' and 
the call returns TIXML_SUCCESS. If it is not
an integer, it returns TIXML_WRONG_TYPE. If the attribute
does not exist, then TIXML_NO_ATTRIBUTE is returned.
"
      end

      operation 183682 "QueryUnsignedAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "value" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ QueryUnsignedAttribute examines the attribute - see QueryIntAttribute()."
      end

      operation 183810 "QueryBoolAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "bval" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " QueryBoolAttribute examines the attribute - see QueryIntAttribute(). 
Note that '1', 'true', or 'yes' are considered true, while '0', 'false'
and 'no' are considered false.
"
      end

      operation 219010 "QueryDoubleAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "dval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ QueryDoubleAttribute examines the attribute - see QueryIntAttribute()."
      end

      operation 183938 "QueryDoubleAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "dval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ QueryDoubleAttribute examines the attribute - see QueryIntAttribute()."
      end

      operation 184066 "QueryFloatAttribute"
	const cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "_value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		double d;
		int result = QueryDoubleAttribute( name, &d );
		if ( result == TIXML_SUCCESS ) {
			*_value = (float)d;
		}
		return result;
	};
"
	
	
	
	
	comment "/ QueryFloatAttribute examines the attribute - see QueryIntAttribute()."
      end

      operation 184194 "QueryStringAttribute"
	const cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "char"
	  param inout name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		const char* cstr = Attribute( name );
		if ( cstr ) {
			*_value = std::string( cstr );
			return TIXML_SUCCESS;
		}
		return TIXML_NO_ATTRIBUTE;
	};
"
	
	
	
	
	comment "/ QueryStringAttribute examines the attribute - see QueryIntAttribute()."
      end

      operation 184322 "QueryValueAttribute"
	stereotype "template"
	const cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "outValue" explicit_type "T"
	cpp_decl "    ${comment}template<typename T>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		const TiXmlAttribute* node = attributeSet.Find( name );
		if ( !node )
			return TIXML_NO_ATTRIBUTE;

		std::stringstream sstream( node->ValueStr() );
		sstream >> *outValue;
		if ( !sstream.fail() )
			return TIXML_SUCCESS;
		return TIXML_WRONG_TYPE;
	};
"
	
	
	
	
	comment " Template form of the attribute query which will try to read the
attribute into the specified type. Very easy, very powerful, but
be careful to make sure to call this with the correct type.

NOTE: This method doesn't work correctly for 'string' types that contain spaces.

@return TIXML_SUCCESS, TIXML_WRONG_TYPE, or TIXML_NO_ATTRIBUTE
"
      end

      operation 184450 "QueryValueAttribute"
	const cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "outValue" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		const TiXmlAttribute* node = attributeSet.Find( name );
		if ( !node )
			return TIXML_NO_ATTRIBUTE;
		*outValue = node->ValueStr();
		return TIXML_SUCCESS;
	};
"
	
	
	
	
      end

      operation 219138 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "cname" explicit_type "char"
	  param in name "cvalue" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 184578 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "cname" explicit_type "char"
	  param in name "cvalue" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 184706 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "std::string"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 184834 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "std::string"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 184962 "Attribute"
	preserve_cpp_body_indent const public explicit_return_type "std::string"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 219266 "QueryIntAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "ival" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 219394 "QueryDoubleAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "dval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 219522 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "_name" explicit_type "std::string"
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ STL std::string form."
      end

      operation 219650 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 219778 "SetDoubleAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 219906 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 220034 "SetDoubleAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 185090 "QueryIntAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "ival" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 185218 "QueryDoubleAttribute"
	preserve_cpp_body_indent const public explicit_return_type "int"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param inout name "dval" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 185346 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "_name" explicit_type "std::string"
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ STL std::string form."
      end

      operation 185474 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 185602 "SetDoubleAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "std::string"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< STL std::string form."
      end

      operation 185730 "SetAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 185858 "SetDoubleAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "name" explicit_type "char"
	  param in name "val" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Sets an attribute of name to a given value. The attribute
will be created if it does not exist, or changed if it does.
"
      end

      operation 185986 "RemoveAttribute"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Deletes an attribute with the given name.
"
      end

      operation 186114 "RemoveAttribute"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {	RemoveAttribute (name.c_str ());	};
"
	
	
	
	
      end

      operation 186242 "FirstAttribute"
	const cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return attributeSet.First(); };
"
	
	
	
	
      end

      operation 186370 "FirstAttribute"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return attributeSet.First(); };
"
	
	
	
	
	comment "/< Access the first attribute in this element."
      end

      operation 186498 "LastAttribute"
	const cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return attributeSet.Last(); };
"
	
	
	
	
      end

      operation 186626 "LastAttribute"
	cpp_inline public return_type class_ref 142850 // TiXmlAttribute
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return attributeSet.Last(); };
"
	
	
	
	
	comment "/< Access the last attribute in this element."
      end

      operation 186754 "GetText"
	preserve_cpp_body_indent const public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Convenience function for easy access to the text inside an element. Although easy
and concise, GetText() is limited compared to getting the TiXmlText child
and accessing it directly.

If the first child of 'this' is a TiXmlText, the GetText()
returns the character string of the Text node, else null is returned.

This is a convenient method for getting the text of simple contained text:
@verbatim
<foo>This is text</foo>
const char* str = fooElement->GetText();
@endverbatim

'str' will be a pointer to \"This is text\". 

Note that this function can be misleading. If the element foo was created from
this XML:
@verbatim
<foo><b>This is text</b></foo> 
@endverbatim

then the value of str would be null. The first child node isn't a text node, it is
another element. From this XML:
@verbatim
<foo>This is <b>text</b></foo> 
@endverbatim
GetText() will return \"This is \".

WARNING: GetText() accesses a child node - don't become confused with the 
similarly named TiXmlHandle::Text() and TiXmlNode::ToText() which are 
safe type casts on the referenced node.
"
      end

      operation 186882 "Clone"
	preserve_cpp_body_indent const cpp_virtual public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Creates a new Element and returns it - the returned element is a copy."
      end

      operation 187010 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Print the Element to a FILE stream."
      end

      operation 187138 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Attribtue parsing starts: next char past '<'
returns: next char past '>'
"
      end

      operation 187266 "ToElement"
	const cpp_virtual cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 187394 "ToElement"
	cpp_virtual cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 187522 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 187650 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 187778 "ClearThis"
	preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 187906 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 188034 "ReadValue"
	preserve_cpp_body_indent protected explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	[internal use]
Reads the \"value\" of the element -- another element, or text.
This should terminate with the current end tag.
"
      end

      classrelation 146818 // attributeSet (<directional composition>)
	relation 146818 *-->
	  a role_name "attributeSet" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 146818 // attributeSet (<directional composition>)
	  b parent class_ref 142978 // TiXmlAttributeSet
      end
    end

    class 143234 "TiXmlComment"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	An XML comment.
"
      classrelation 146946 // <generalisation>
	relation 146946 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 146946 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 188162 "TiXmlComment"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {};
"
	
	
	
	
	comment "/ Constructs an empty comment."
      end

      operation 188290 "TiXmlComment"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "_value" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {
		SetValue( _value );
	};
"
	
	
	
	
	comment "/ Construct a comment from text."
      end

      operation 188418 "TiXmlComment"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143234 // TiXmlComment
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} : TiXmlNode( TiXmlNode::TINYXML_COMMENT )
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 188546 "operator ="
	preserve_cpp_body_indent public return_type class_ref 143234 // TiXmlComment
	nparams 1
	  param in name "base" type class_ref 143234 // TiXmlComment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 188674 "~TiXmlComment"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 188802 "Clone"
	preserve_cpp_body_indent const cpp_virtual public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Returns a copy of this Comment."
      end

      operation 188930 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Write this Comment to a FILE stream."
      end

      operation 189058 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Attribtue parsing starts: at the ! of the !--
returns: next char past '>'
"
      end

      operation 189186 "ToComment"
	const cpp_virtual cpp_inline public return_type class_ref 143234 // TiXmlComment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 189314 "ToComment"
	cpp_virtual cpp_inline public return_type class_ref 143234 // TiXmlComment
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 189442 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 189570 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143234 // TiXmlComment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 189698 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 143362 "TiXmlText"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "	virtual void StreamOut( TIXML_OSTREAM * out ) const;
 XML text. A text node can have 2 ways to output the next. \"normal\" output 
and CDATA. It will default to the mode it was parsed from the XML file and
you generally want to leave it alone, but you can change the output mode with 
SetCDATA() and query it with CDATA().
"
      classrelation 147074 // <generalisation>
	relation 147074 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147074 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      classrelation 147202 // <dependency>
	relation 147202 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 147202 // <dependency>
	  b parent class_ref 143106 // TiXmlElement
      end

      operation 189826 "TiXmlText"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "initValue" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} : TiXmlNode (TiXmlNode::TINYXML_TEXT)
	{
		SetValue( initValue );
		cdata = false;
	};
"
	
	
	
	
	comment " Constructor for text element. By default, it is treated as 
normal, encoded text. If you want it be output as a CDATA text
element, set the parameter _cdata to 'true'
"
      end

      operation 189954 "~TiXmlText"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 190082 "TiXmlText"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "initValue" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : TiXmlNode (TiXmlNode::TINYXML_TEXT)
	{
		SetValue( initValue );
		cdata = false;
	};
"
	
	
	
	
	comment "/ Constructor."
      end

      operation 190210 "TiXmlText"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143362 // TiXmlText
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); };
"
	
	
	
	
      end

      operation 190338 "operator ="
	cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 1
	  param in name "base" type class_ref 143362 // TiXmlText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { base.CopyTo( this ); return *this; };
"
	
	
	
	
      end

      operation 190466 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Write this text object to a FILE stream."
      end

      operation 190594 "CDATA"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cdata; };
"
	
	
	
	
	comment "/ Queries whether this represents text using a CDATA section."
      end

      operation 190722 "SetCDATA"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_cdata" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { cdata = _cdata; };
"
	
	
	
	
	comment "/ Turns on or off a CDATA representation of text."
      end

      operation 190850 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 190978 "ToText"
	const cpp_virtual cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 191106 "ToText"
	cpp_virtual cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 191234 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 191362 "Clone"
	preserve_cpp_body_indent const cpp_virtual protected return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/  [internal use] Creates a new Element and returns it."
      end

      operation 191490 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143362 // TiXmlText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 191618 "Blank"
	preserve_cpp_body_indent const protected explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 191746 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 158594 "cdata"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if this should be input and output as a CDATA style text element"
      end
    end

    class 143490 "TiXmlDeclaration"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " In correct XML the declaration is the first entry in the file.
@verbatim
<?xml version=\"1.0\" standalone=\"yes\"?>
@endverbatim

TinyXml will happily read or write files without a declaration,
however. There are 3 possible attributes to the declaration:
version, encoding, and standalone.

Note: In this version of the code, the attributes are
handled as special cases, not generic attributes, simply
because there can only be at most 3 and they are always the same.
"
      classrelation 147330 // <generalisation>
	relation 147330 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147330 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 191874 "TiXmlDeclaration"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {};
"
	
	
	
	
	comment "/ Construct an empty declaration."
      end

      operation 192002 "TiXmlDeclaration"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "_version" explicit_type "std::string"
	  param in name "_encoding" explicit_type "std::string"
	  param in name "_standalone" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}
	: TiXmlNode( TiXmlNode::TINYXML_DECLARATION )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Constructor."
      end

      operation 192130 "TiXmlDeclaration"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param in name "_version" explicit_type "char"
	  param in name "_encoding" explicit_type "char"
	  param in name "_standalone" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}${)}
	: TiXmlNode( TiXmlNode::TINYXML_DECLARATION )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Construct."
      end

      operation 192258 "TiXmlDeclaration"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143490 // TiXmlDeclaration
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}
	: TiXmlNode( TiXmlNode::TINYXML_DECLARATION )
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 192386 "operator ="
	preserve_cpp_body_indent public return_type class_ref 143490 // TiXmlDeclaration
	nparams 1
	  param in name "copy" type class_ref 143490 // TiXmlDeclaration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 192514 "~TiXmlDeclaration"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 192642 "Version"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return version.c_str (); };
"
	
	
	
	
	comment "/ Version. Will return an empty string if none was found."
      end

      operation 192770 "Encoding"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return encoding.c_str (); };
"
	
	
	
	
	comment "/ Encoding. Will return an empty string if none was found."
      end

      operation 192898 "Standalone"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return standalone.c_str (); };
"
	
	
	
	
	comment "/ Is this a standalone document?"
      end

      operation 193026 "Clone"
	preserve_cpp_body_indent const cpp_virtual public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Creates a copy of this Declaration and returns it."
      end

      operation 193154 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 3
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	  param inout name "str" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Print this declaration to a FILE stream."
      end

      operation 193282 "Print"
	const cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		Print( cfile, depth, 0 );
	};
"
	
	
	
	
      end

      operation 193410 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "_encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 193538 "ToDeclaration"
	const cpp_virtual cpp_inline public return_type class_ref 143490 // TiXmlDeclaration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 193666 "ToDeclaration"
	cpp_virtual cpp_inline public return_type class_ref 143490 // TiXmlDeclaration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 193794 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 193922 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143490 // TiXmlDeclaration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 194050 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 158722 "version"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158850 "encoding"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 158978 "standalone"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 143618 "TiXmlUnknown"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Any tag that tinyXml doesn't recognize is saved as an
unknown. It is a tag of text, but should not be modified.
It will be written back to the XML, unchanged, when the file
is saved.

DTD tags get thrown into TiXmlUnknowns.
"
      classrelation 147458 // <generalisation>
	relation 147458 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147458 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 194178 "TiXmlUnknown"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{};
"
	
	
	
	
      end

      operation 194306 "~TiXmlUnknown"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 194434 "TiXmlUnknown"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143618 // TiXmlUnknown
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); };
"
	
	
	
	
      end

      operation 194562 "operator ="
	cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 1
	  param in name "copy" type class_ref 143618 // TiXmlUnknown
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { copy.CopyTo( this ); return *this; };
"
	
	
	
	
      end

      operation 194690 "Clone"
	preserve_cpp_body_indent const cpp_virtual public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Creates a copy of this Unknown and returns it."
      end

      operation 194818 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Print this Unknown to a FILE stream."
      end

      operation 194946 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 195074 "ToUnknown"
	const cpp_virtual cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 195202 "ToUnknown"
	cpp_virtual cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 195330 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 195458 "CopyTo"
	preserve_cpp_body_indent const protected explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143618 // TiXmlUnknown
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 195586 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 143746 "TiXmlDocument"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Always the top level node. A document binds together all the
XML pieces. It can be saved, loaded, and printed to the screen.
The 'value' of a document node is the xml file name.
"
      classrelation 147586 // <generalisation>
	relation 147586 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147586 // <generalisation>
	  b parent class_ref 142722 // TiXmlNode
      end

      operation 195714 "TiXmlDocument"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)} : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Create an empty document, that has no name."
      end

      operation 195842 "TiXmlDocument"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "documentName" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)} : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Create a document with a name. The name of the document is also the filename of the xml."
      end

      operation 195970 "TiXmlDocument"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "documentName" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )
${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Constructor."
      end

      operation 196098 "TiXmlDocument"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "copy" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 196226 "operator ="
	preserve_cpp_body_indent public return_type class_ref 143746 // TiXmlDocument
	nparams 1
	  param in name "copy" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 196354 "~TiXmlDocument"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 196482 "LoadFile"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 1
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Load a file using the current document value.
Returns true if successful. Will delete any existing
document data before loading.
"
      end

      operation 196610 "SaveFile"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Save a file using the current document value. Returns true if successful."
      end

      operation 197250 "LoadFile"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "_filename" explicit_type "char"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Load a file using the given filename. Returns true if successful."
      end

      operation 196738 "LoadFile"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param in name "_filename" explicit_type "char"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Load a file using the given filename. Returns true if successful."
      end

      operation 196866 "SaveFile"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Save a file using the given filename. Returns true if successful."
      end

      operation 220162 "LoadFile"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param inout name "file" explicit_type "FILE"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Load a file using the given FILE*. Returns true if successful. Note that this method
doesn't stream - the entire object pointed at by the FILE*
will be interpreted as an XML file. TinyXML doesn't stream in XML from the current
file location. Streaming may be added in the future.
"
      end

      operation 220290 "SaveFile"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param inout name "fp" explicit_type "FILE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Save a file using the given FILE*. Returns true if successful."
      end

      operation 220418 "LoadFile"
	cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "filename" explicit_type "std::string"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		return LoadFile( filename.c_str(), encoding );
	};
"
	
	
	
	
      end

      operation 196994 "LoadFile"
	preserve_cpp_body_indent public explicit_return_type "bool"
	nparams 2
	  param inout name "file" explicit_type "FILE"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Load a file using the given FILE*. Returns true if successful. Note that this method
doesn't stream - the entire object pointed at by the FILE*
will be interpreted as an XML file. TinyXML doesn't stream in XML from the current
file location. Streaming may be added in the future.
"
      end

      operation 197122 "SaveFile"
	preserve_cpp_body_indent const public explicit_return_type "bool"
	nparams 1
	  param inout name "fp" explicit_type "FILE"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Save a file using the given FILE*. Returns true if successful."
      end

      operation 197378 "SaveFile"
	const cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "filename" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		return SaveFile( filename.c_str() );
	};
"
	
	
	
	
      end

      operation 197506 "Parse"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "prevData" type class_ref 144130 // TiXmlParsingData
	    defaultvalue "0"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	    defaultvalue "TIXML_DEFAULT_ENCODING "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Parse the given null terminated block of xml data. Passing in an encoding to this
method (either TIXML_ENCODING_LEGACY or TIXML_ENCODING_UTF8 will force TinyXml
to use that encoding, regardless of what TinyXml might otherwise try to detect.
"
      end

      operation 197634 "RootElement"
	const cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return FirstChildElement(); };
"
	
	
	
	
	comment " Get the root element -- the only top level element -- of the document.
In well formed XML, there should only be one. TinyXml is tolerant of
multiple elements at the document level.
"
      end

      operation 197762 "RootElement"
	cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return FirstChildElement(); };
"
	
	
	
	
      end

      operation 197890 "Error"
	const cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return error; };
"
	
	
	
	
	comment " If an error occurs, Error will be set to true. Also,
- The ErrorId() will contain the integer identifier of the error (not generally useful)
- The ErrorDesc() method will return the name of the error. (very useful)
- The ErrorRow() and ErrorCol() will return the location of the error (if known)
"
      end

      operation 198018 "ErrorDesc"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return errorDesc.c_str (); };
"
	
	
	
	
	comment "/ Contains a textual (english) description of the error if one occurs."
      end

      operation 198146 "ErrorId"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return errorId; };
"
	
	
	
	
	comment " Generally, you probably want the error string ( ErrorDesc() ). But if you
prefer the ErrorId, this function will fetch it.
"
      end

      operation 198274 "ErrorRow"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return errorLocation.row+1; };
"
	
	
	
	
	comment " Returns the location (if known) of the error. The first column is column 1, 
and the first row is row 1. A value of 0 means the row and column wasn't applicable
(memory errors, for example, have no row/column) or the parser lost the error. (An
error in the error reporting, in that case.)

@sa SetTabSize, Row, Column
"
      end

      operation 198402 "ErrorCol"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return errorLocation.col+1; };
"
	
	
	
	
      end

      operation 198530 "SetTabSize"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_tabsize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { tabsize = _tabsize; };
"
	
	
	
	
	comment "/< The column where the error occured. See ErrorRow()
 SetTabSize() allows the error reporting functions (ErrorRow() and ErrorCol())
to report the correct values for row and column. It does not change the output
or input in any way.

By calling this method, with a tab size
greater than 0, the row and column of each node and attribute is stored
when the file is loaded. Very useful for tracking the DOM back in to
the source file.

The tab size is required for calculating the location of nodes. If not
set, the default of 4 is used. The tabsize is set per document. Setting
the tabsize to 0 disables row/column tracking.

Note that row and column tracking is not supported when using operator>>.

The tab size needs to be enabled before the parse or load. Correct usage:
@verbatim
TiXmlDocument doc;
doc.SetTabSize( 8 );
doc.Load( \"myfile.xml\" );
@endverbatim

@sa Row, Column
"
      end

      operation 198658 "TabSize"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return tabsize; };
"
	
	
	
	
      end

      operation 198786 "ClearError"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {	error = false; 
												errorId = 0; 
												errorDesc = \"\"; 
												errorLocation.row = errorLocation.col = 0; 
												//errorLocation.last = 0; 
											};
"
	
	
	
	
	comment " If you have handled the error, it can be reset with this call. The error
state is automatically cleared if you Parse a new XML block.
"
      end

      operation 198914 "Print"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { Print( stdout, 0 ); };
"
	
	
	
	
	comment " Write the document to standard out using formatted printing (\"pretty print\"). "
      end

      operation 199042 "Print"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	    defaultvalue "0 "
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Write the document to a string using formatted printing (\"pretty print\"). This
will allocate a character array (new char[]) and return it as a pointer. The
calling code pust call delete[] on the return char* to avoid a memory leak.

char* PrintToMemory() const; 
/ Print this Document to a FILE stream."
      end

      operation 199170 "SetError"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 4
	  param in name "err" explicit_type "int"
	  param in name "pError" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " [internal use]"
      end

      operation 199298 "ToDocument"
	const cpp_virtual cpp_inline public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
      end

      operation 199426 "ToDocument"
	cpp_virtual cpp_inline public return_type class_ref 143746 // TiXmlDocument
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return this; };
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type."
      end

      operation 199554 "Accept"
	preserve_cpp_body_indent const cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param inout name "visitor" type class_ref 142466 // TiXmlVisitor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/< Cast to a more defined type. Will return null not of the requested type.
 Walk the XML tree visiting this node and all of its children. 
"
      end

      operation 199682 "Clone"
	preserve_cpp_body_indent const cpp_virtual protected return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " [internal use]"
      end

      operation 199810 "StreamIn"
	preserve_cpp_body_indent cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 199938 "CopyTo"
	preserve_cpp_body_indent const private explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 159106 "error"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159234 "errorId"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159362 "errorDesc"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159490 "tabsize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 147714 // errorLocation (<directional composition>)
	relation 147714 *-->
	  a role_name "errorLocation" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 147714 // errorLocation (<directional composition>)
	  b parent class_ref 142338 // TiXmlCursor
      end

      attribute 159618 "useMicrosoftBOM"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the UTF-8 BOM were found when read. Note this, and try to write."
      end
    end

    class 143874 "TiXmlHandle"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
A TiXmlHandle is a class that wraps a node pointer with null checks; this is
an incredibly useful thing. Note that TiXmlHandle is not part of the TinyXml
DOM structure. It is a separate utility class.

Take an example:
@verbatim
<Document>
<Element attributeA = \"valueA\">
<Child attributeB = \"value1\" />
<Child attributeB = \"value2\" />
</Element>
<Document>
@endverbatim

Assuming you want the value of \"attributeB\" in the 2nd \"Child\" element, it's very 
easy to write a *lot* of code that looks like:

@verbatim
TiXmlElement* root = document.FirstChildElement( \"Document\" );
if ( root )
{
TiXmlElement* element = root->FirstChildElement( \"Element\" );
if ( element )
{
TiXmlElement* child = element->FirstChildElement( \"Child\" );
if ( child )
{
TiXmlElement* child2 = child->NextSiblingElement( \"Child\" );
if ( child2 )
{
// Finally do something useful.
@endverbatim

And that doesn't even cover \"else\" cases. TiXmlHandle addresses the verbosity
of such code. A TiXmlHandle checks for null	pointers so it is perfectly safe 
and correct to use:

@verbatim
TiXmlHandle docHandle( &document );
TiXmlElement* child2 = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).Child( \"Child\", 1 ).ToElement();
if ( child2 )
{
// do something useful
@endverbatim

Which is MUCH more concise and useful.

It is also safe to copy handles - internally they are nothing more than node pointers.
@verbatim
TiXmlHandle handleCopy = handle;
@endverbatim

What they should not be used for is iteration:

@verbatim
int i=0; 
while ( true )
{
TiXmlElement* child = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).Child( \"Child\", i ).ToElement();
if ( !child )
break;
// do something
++i;
}
@endverbatim

It seems reasonable, but it is in fact two embedded while loops. The Child method is 
a linear walk to find the element, so this code would iterate much more than it needs 
to. Instead, prefer:

@verbatim
TiXmlElement* child = docHandle.FirstChild( \"Document\" ).FirstChild( \"Element\" ).FirstChild( \"Child\" ).ToElement();

for( child; child; child=child->NextSiblingElement() )
{
// do something
}
@endverbatim
"
      operation 200066 "TiXmlHandle"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "_node" type class_ref 142722 // TiXmlNode
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw}${abstract} { this->node = _node; };
"
	
	
	
	
	comment "/ Create a handle from any node (at any depth of the tree.) This can be a null pointer."
      end

      operation 200194 "TiXmlHandle"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ref" type class_ref 143874 // TiXmlHandle
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract} { this->node = ref.node; };
"
	
	
	
	
	comment "/ Copy constructor"
      end

      operation 200322 "operator ="
	cpp_inline public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "ref" type class_ref 143874 // TiXmlHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { if ( &ref != this ) this->node = ref.node; return *this; };
"
	
	
	
	
      end

      operation 200450 "FirstChild"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Return a handle to the first child node."
      end

      operation 200578 "FirstChild"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Return a handle to the first child node with the given name."
      end

      operation 200706 "FirstChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Return a handle to the first child element."
      end

      operation 200834 "FirstChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "value" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ Return a handle to the first child element with the given name."
      end

      operation 220546 "Child"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "value" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child with the given name. 
The first child is 0, the second 1, etc.
"
      end

      operation 220674 "Child"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child. 
The first child is 0, the second 1, etc.
"
      end

      operation 220802 "ChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "value" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child element with the given name. 
The first child element is 0, the second 1, etc. Note that only TiXmlElements
are indexed: other types are not counted.
"
      end

      operation 220930 "ChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child element. 
The first child element is 0, the second 1, etc. Note that only TiXmlElements
are indexed: other types are not counted.
"
      end

      operation 200962 "Child"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "value" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child with the given name. 
The first child is 0, the second 1, etc.
"
      end

      operation 201090 "Child"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child. 
The first child is 0, the second 1, etc.
"
      end

      operation 201218 "ChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "value" explicit_type "char"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child element with the given name. 
The first child element is 0, the second 1, etc. Note that only TiXmlElements
are indexed: other types are not counted.
"
      end

      operation 201346 "ChildElement"
	preserve_cpp_body_indent const public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return a handle to the \"index\" child element. 
The first child element is 0, the second 1, etc. Note that only TiXmlElements
are indexed: other types are not counted.
"
      end

      operation 201474 "FirstChild"
	const cpp_inline public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return FirstChild( _value.c_str() ); };
"
	
	
	
	
      end

      operation 201602 "FirstChildElement"
	const cpp_inline public return_type class_ref 143874 // TiXmlHandle
	nparams 1
	  param in name "_value" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return FirstChildElement( _value.c_str() ); };
"
	
	
	
	
      end

      operation 201730 "Child"
	const cpp_inline public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "_value" explicit_type "std::string"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return Child( _value.c_str(), index ); };
"
	
	
	
	
      end

      operation 201858 "ChildElement"
	const cpp_inline public return_type class_ref 143874 // TiXmlHandle
	nparams 2
	  param in name "_value" explicit_type "std::string"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} { return ChildElement( _value.c_str(), index ); };
"
	
	
	
	
      end

      operation 201986 "ToNode"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return node; };
"
	
	
	
	
	comment " Return the handle as a TiXmlNode. This may return null.
"
      end

      operation 202114 "ToElement"
	const cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); };
"
	
	
	
	
	comment " Return the handle as a TiXmlElement. This may return null.
"
      end

      operation 202242 "ToText"
	const cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( ( node && node->ToText() ) ? node->ToText() : 0 ); };
"
	
	
	
	
	comment "	Return the handle as a TiXmlText. This may return null.
"
      end

      operation 202370 "ToUnknown"
	const cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); };
"
	
	
	
	
	comment " Return the handle as a TiXmlUnknown. This may return null.
"
      end

      operation 202498 "Node"
	const cpp_inline public return_type class_ref 142722 // TiXmlNode
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ToNode(); };
"
	
	
	
	
	comment " @deprecated use ToNode. 
Return the handle as a TiXmlNode. This may return null.
"
      end

      operation 202626 "Element"
	const cpp_inline public return_type class_ref 143106 // TiXmlElement
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ToElement(); };
"
	
	
	
	
	comment " @deprecated use ToElement. 
Return the handle as a TiXmlElement. This may return null.
"
      end

      operation 202754 "Text"
	const cpp_inline public return_type class_ref 143362 // TiXmlText
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ToText(); };
"
	
	
	
	
	comment "	@deprecated use ToText()
Return the handle as a TiXmlText. This may return null.
"
      end

      operation 202882 "Unknown"
	const cpp_inline public return_type class_ref 143618 // TiXmlUnknown
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return ToUnknown(); };
"
	
	
	
	
	comment " @deprecated use ToUnknown()
Return the handle as a TiXmlUnknown. This may return null.
"
      end

      classrelation 147842 // node (<unidirectional association>)
	relation 147842 --->
	  a role_name "node" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 147842 // node (<unidirectional association>)
	  b parent class_ref 142722 // TiXmlNode
      end
    end

    class 144002 "TiXmlPrinter"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Print to memory functionality. The TiXmlPrinter is useful when you need to:

-# Print to memory (especially in non-STL mode)
-# Control formatting (line endings, etc.)

When constructed, the TiXmlPrinter is in its default \"pretty printing\" mode.
Before calling Accept() you can call methods to control the printing
of the XML document. After TiXmlNode::Accept() is called, the printed document can
be accessed via the CStr(), Str(), and Size() methods.

TiXmlPrinter uses the Visitor API.
@verbatim
TiXmlPrinter printer;
printer.SetIndent( \"\\t\" );

doc.Accept( &printer );
fprintf( stdout, \"%s\", printer.CStr() );
@endverbatim
"
      classrelation 147970 // <generalisation>
	relation 147970 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 147970 // <generalisation>
	  b parent class_ref 142466 // TiXmlVisitor
      end

      operation 203010 "TiXmlPrinter"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} : depth( 0 ), simpleTextPrint( false ),
					 buffer(), indent( \"    \" ), lineBreak( \"\\n\" ) {};
"
	
	
	
	
      end

      operation 203138 "VisitEnter"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "doc" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203266 "VisitExit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "doc" type class_ref 143746 // TiXmlDocument
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203394 "VisitEnter"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 2
	  param in name "element" type class_ref 143106 // TiXmlElement
	  param in name "firstAttribute" type class_ref 142850 // TiXmlAttribute
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203522 "VisitExit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "element" type class_ref 143106 // TiXmlElement
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203650 "Visit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "declaration" type class_ref 143490 // TiXmlDeclaration
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203778 "Visit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "text" type class_ref 143362 // TiXmlText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 203906 "Visit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "comment" type class_ref 143234 // TiXmlComment
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 204034 "Visit"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 1
	  param in name "unknown" type class_ref 143618 // TiXmlUnknown
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 204162 "SetIndent"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_indent" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { indent = _indent ? _indent : \"\" ; };
"
	
	
	
	
	comment " Set the indent characters for printing. By default 4 spaces
but tab (\\t) is also useful, or null/empty string for no indentation.
"
      end

      operation 204290 "Indent"
	cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return indent.c_str(); };
"
	
	
	
	
	comment "/ Query the indention string."
      end

      operation 204418 "SetLineBreak"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "_lineBreak" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { lineBreak = _lineBreak ? _lineBreak : \"\"; };
"
	
	
	
	
	comment " Set the line breaking string. By default set to newline (\\n). 
Some operating systems prefer other characters, or can be
set to the null/empty string for no indenation.
"
      end

      operation 204546 "LineBreak"
	cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return lineBreak.c_str(); };
"
	
	
	
	
	comment "/ Query the current line breaking string."
      end

      operation 204674 "SetStreamPrinting"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { indent = \"\";
													  lineBreak = \"\";
													};
"
	
	
	
	
	comment " Switch over to \"stream printing\" which is the most dense formatting without 
linebreaks. Common when the XML is needed for network transmission.
"
      end

      operation 204802 "CStr"
	cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return buffer.c_str(); };
"
	
	
	
	
	comment "/ Return the result."
      end

      operation 204930 "Size"
	cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return buffer.size(); };
"
	
	
	
	
	comment "/ Return the length of the result string."
      end

      operation 205058 "Str"
	cpp_inline public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return buffer; };
"
	
	
	
	
	comment "/ Return the result."
      end

      operation 205186 "DoIndent"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		for( int i=0; i<depth; ++i )
			buffer += indent;
	};
"
	
	
	
	
      end

      operation 205314 "DoLineBreak"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
		buffer += lineBreak;
	};
"
	
	
	
	
      end

      attribute 159746 "depth"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 159874 "simpleTextPrint"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160002 "buffer"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160130 "indent"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160258 "lineBreak"
	private explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 144130 "TiXmlParsingData"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 148098 // <dependency>
	relation 148098 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 148098 // <dependency>
	  b parent class_ref 143746 // TiXmlDocument
      end

      operation 205442 "Stamp"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "now" explicit_type "char"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 205570 "Cursor"
	const cpp_inline public return_type class_ref 142338 // TiXmlCursor
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cursor; };
"
	
	
	
	
      end

      operation 205698 "TiXmlParsingData"
	cpp_inline private explicit_return_type ""
	nparams 4
	  param in name "start" explicit_type "char"
	  param in name "_tabsize" explicit_type "int"
	  param in name "row" explicit_type "int"
	  param in name "col" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw}${abstract} {
		assert( start );
		stamp = start;
		tabsize = _tabsize;
		cursor.row = row;
		cursor.col = col;
	};
"
	
	
	
	
	comment " Only used by the document!"
      end

      classrelation 148226 // cursor (<directional composition>)
	relation 148226 *-->
	  a role_name "cursor" private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 148226 // cursor (<directional composition>)
	  b parent class_ref 142338 // TiXmlCursor
      end

      attribute 160386 "stamp"
	const_attribute private explicit_type "char"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160514 "tabsize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145026 "anonymous1"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Only used by Attribute::Query functions"
      attribute 153218 "TIXML_SUCCESS"
	public type class_ref 145026 // anonymous1
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153346 "TIXML_NO_ATTRIBUTE"
	public type class_ref 145026 // anonymous1
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 153474 "TIXML_WRONG_TYPE"
	public type class_ref 145026 // anonymous1
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145154 "TiXmlBase"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " TiXmlBase is a base class for every class in TinyXml.
It does little except to establish that TinyXml classes
can be printed and provide some utility functions.

In XML, the document and elements can contain
other elements and other types of nodes.

@verbatim
A Document can contain:	Element	(container or leaf)
Comment (leaf)
Unknown (leaf)
Declaration( leaf )

An Element can contain:	Element (container or leaf)
Text	(leaf)
Attributes (not on tree)
Comment (leaf)
Unknown (leaf)

A Decleration contains: Attributes (not on tree)
@endverbatim
"
      classrelation 144130 // <dependency>
	relation 144130 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 144130 // <dependency>
	  b parent class_ref 142722 // TiXmlNode
      end

      classrelation 144258 // <dependency>
	relation 144258 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 144258 // <dependency>
	  b parent class_ref 143106 // TiXmlElement
      end

      classrelation 144386 // <dependency>
	relation 144386 -_->
	  stereotype "friend"
	  a public
	    cpp default "${type}"
	    classrelation_ref 144386 // <dependency>
	  b parent class_ref 143746 // TiXmlDocument
      end

      operation 162562 "TiXmlBase"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw}${abstract} :	userData(0)		{};
"
	
	
	
	
      end

      operation 162690 "~TiXmlBase"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw}${abstract} {};
"
	
	
	
	
      end

      operation 162818 "Print"
	abstract const cpp_virtual public explicit_return_type "void"
	nparams 2
	  param inout name "cfile" explicit_type "FILE"
	  param in name "depth" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
	comment "	All TinyXml classes can print themselves to a filestream
or the string class (TiXmlString in non-STL mode, std::string
in STL mode.) Either or both cfile and str can be null.

This is a formatted print, and will insert 
tabs and newlines.

(For an unformatted stream, use the << operator.)
"
      end

      operation 162946 "SetCondenseWhiteSpace"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "condense" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { condenseWhiteSpace = condense; };
"
	
	
	
	
	comment "	The world does not agree on whether white space should be kept or
not. In order to make everyone happy, these global, static functions
are provided to set whether or not TinyXml will condense all white space
into a single space or not. The default is to condense. Note changing this
value is not thread safe.
"
      end

      operation 163074 "IsWhiteSpaceCondensed"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return condenseWhiteSpace; };
"
	
	
	
	
	comment "/ Return the current white space setting."
      end

      operation 163202 "Row"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return location.row + 1; };
"
	
	
	
	
	comment " Return the position, in the original source file, of this node or attribute.
The row and column are 1-based. (That is the first row and first column is
1,1). If the returns values are 0 or less, then the parser does not have
a row and column value.

Generally, the row and column value will be set when the TiXmlDocument::Load(),
TiXmlDocument::LoadFile(), or any TiXmlNode::Parse() is called. It will NOT be set
when the DOM was created from operator>>.

The values reflect the initial load. Once the DOM is modified programmatically
(by adding or changing nodes and attributes) the new values will NOT update to
reflect changes in the document.

There is a minor performance cost to computing the row and column. Computation
can be disabled if TiXmlDocument::SetTabSize() is called with 0 as the value.

@sa TiXmlDocument::SetTabSize()
"
      end

      operation 163330 "Column"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return location.col + 1; };
"
	
	
	
	
      end

      operation 163458 "SetUserData"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "user" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { userData = user; };
"
	
	
	
	
	comment "/< See Row()"
      end

      operation 163586 "GetUserData"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return userData; };
"
	
	
	
	
	comment "/< Set a pointer to arbitrary user data."
      end

      operation 163714 "GetUserData"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return userData; };
"
	
	
	
	
	comment "/< Get a pointer to arbitrary user data."
      end

      attribute 153986 "utf8ByteTable"
	class_attribute const_attribute public explicit_type "int"
	multiplicity "[256]"
	init_value "= 
{
	//	0	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x00
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x10
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x20
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x30
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x40
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x50
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x60
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x70	End of ASCII range
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x80 0x80 to 0xc1 invalid
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0x90 
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0xa0 
		1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	// 0xb0 
		1,	1,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	// 0xc0 0xc2 to 0xdf 2 byte
		2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	2,	// 0xd0
		3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	3,	// 0xe0 0xe0 to 0xef 3 byte
		4,	4,	4,	4,	4,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1,	1	// 0xf0 0xf0 to 0xf4 4 byte, 0xf5 and higher invalid
}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "/< Get a pointer to arbitrary user data.
 Table that returs, for a given lead byte, the total number of bytes
 in the UTF-8 sequence.
"
      end

      operation 163842 "Parse"
	abstract cpp_virtual public explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "data" type class_ref 144130 // TiXmlParsingData
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	
	
	
	
      end

      operation 163970 "EncodeString"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param in name "str" explicit_type "TIXML_STRING"
	  param inout name "outString" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Expands entities in a string. Note this should not contian the tag's '<', '>', etc, 
or they will be transformed into entities!
"
      end

      class 154242 "anonymous4"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 176770 "TIXML_NO_ERROR"
	  public type class_ref 154242 // anonymous4
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 176898 "TIXML_ERROR"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177026 "TIXML_ERROR_OPENING_FILE"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177154 "TIXML_ERROR_PARSING_ELEMENT"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177282 "TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177410 "TIXML_ERROR_READING_ELEMENT_VALUE"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177538 "TIXML_ERROR_READING_ATTRIBUTES"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177666 "TIXML_ERROR_PARSING_EMPTY"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177794 "TIXML_ERROR_READING_END_TAG"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 177922 "TIXML_ERROR_PARSING_UNKNOWN"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178050 "TIXML_ERROR_PARSING_COMMENT"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178178 "TIXML_ERROR_PARSING_DECLARATION"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178306 "TIXML_ERROR_DOCUMENT_EMPTY"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178434 "TIXML_ERROR_EMBEDDED_NULL"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178562 "TIXML_ERROR_PARSING_CDATA"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178690 "TIXML_ERROR_DOCUMENT_TOP_ONLY"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 178818 "TIXML_ERROR_STRING_COUNT"
	  public type class_ref 154242 // anonymous4
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 145282 "anonymous2"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 154114 "TIXML_NO_ERROR"
	  public type class_ref 145282 // anonymous2
	  init_value " 0"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154242 "TIXML_ERROR"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154370 "TIXML_ERROR_OPENING_FILE"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154498 "TIXML_ERROR_PARSING_ELEMENT"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154626 "TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154754 "TIXML_ERROR_READING_ELEMENT_VALUE"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 154882 "TIXML_ERROR_READING_ATTRIBUTES"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155010 "TIXML_ERROR_PARSING_EMPTY"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155138 "TIXML_ERROR_READING_END_TAG"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155266 "TIXML_ERROR_PARSING_UNKNOWN"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155394 "TIXML_ERROR_PARSING_COMMENT"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155522 "TIXML_ERROR_PARSING_DECLARATION"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155650 "TIXML_ERROR_DOCUMENT_EMPTY"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155778 "TIXML_ERROR_EMBEDDED_NULL"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 155906 "TIXML_ERROR_PARSING_CDATA"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 156034 "TIXML_ERROR_DOCUMENT_TOP_ONLY"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 156162 "TIXML_ERROR_STRING_COUNT"
	  public type class_ref 145282 // anonymous2
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 164098 "SkipWhiteSpace"
	class_operation preserve_cpp_body_indent protected explicit_return_type "char"
	nparams 2
	  param in name "p" explicit_type "char"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 164226 "IsWhiteSpace"
	class_operation cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { 
		return ( isspace( (unsigned char) c ) || c == '\\n' || c == '\\r' ); 
	};
"
	
	
	
	
      end

      operation 164354 "IsWhiteSpace"
	class_operation cpp_inline protected explicit_return_type "bool"
	nparams 1
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
		if ( c < 256 )
			return IsWhiteSpace( (char) c );
		return false;	// Again, only truly correct for English/Latin...but usually works.
	};
"
	
	
	
	
      end

      operation 164482 "StreamWhiteSpace"
	class_operation preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 2
	  param inout name "in" explicit_type "std::istream"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 164610 "StreamTo"
	class_operation preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 3
	  param inout name "in" explicit_type "std::istream"
	  param in name "character" explicit_type "int"
	  param inout name "tag" explicit_type "TIXML_STRING"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

//static

${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 164738 "ReadName"
	class_operation preserve_cpp_body_indent protected explicit_return_type "char"
	nparams 3
	  param in name "p" explicit_type "char"
	  param inout name "name" explicit_type "TIXML_STRING"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// One of TinyXML's more performance demanding functions. Try to keep the memory overhead down. The
// \"assign\" optimization removes over 10% of the execution time.
//

// One of TinyXML's more performance demanding functions. Try to keep the memory overhead down. The
// \"assign\" optimization removes over 10% of the execution time.
//

${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Reads an XML name into the string provided. Returns
a pointer just past the last character of the name,
or 0 if the function has an error.
"
      end

      operation 164866 "ReadText"
	class_operation preserve_cpp_body_indent protected explicit_return_type "char"
	nparams 6
	  param in name "p" explicit_type "char"
	  param inout name "text" explicit_type "TIXML_STRING"
	  param in name "trimWhiteSpace" explicit_type "bool"
	  param in name "endTag" explicit_type "char"
	  param in name "caseInsensitive" explicit_type "bool"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} * ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "	Reads text. Returns a pointer past the given end tag.
Wickedly complex options, but it keeps the (sensitive) code in one place.
"
      end

      operation 164994 "GetEntity"
	class_operation preserve_cpp_body_indent protected explicit_return_type "char"
	nparams 4
	  param in name "p" explicit_type "char"
	  param inout name "value" explicit_type "char"
	  param inout name "length" explicit_type "int"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} * ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " the current encoding
 If an entity has been found, transform it into a character."
      end

      operation 165122 "GetChar"
	class_operation cpp_inline protected explicit_return_type "char"
	nparams 4
	  param in name "p" explicit_type "char"
	  param inout name "_value" explicit_type "char"
	  param inout name "length" explicit_type "int"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
		assert( p );
		if ( encoding == TIXML_ENCODING_UTF8 )
		{
			*length = utf8ByteTable[ *((const unsigned char*)p) ];
			assert( *length >= 0 && *length < 5 );
		}
		else
		{
			*length = 1;
		}

		if ( *length == 1 )
		{
			if ( *p == '&' )
				return GetEntity( p, _value, length, encoding );
			*_value = *p;
			return p+1;
		}
		else if ( *length )
		{
			//strncpy( _value, p, *length );	// lots of compilers don't like this function (unsafe),
												// and the null terminator isn't needed
			for( int i=0; p[i] && i<*length; ++i ) {
				_value[i] = p[i];
			}
			return p + (*length);
		}
		else
		{
			// Not valid text.
			return 0;
		}
	};
"
	
	
	
	
	comment " Get a character, while interpreting entities.
 The length can be from 0 to 4 bytes."
      end

      operation 165250 "StringEqual"
	class_operation preserve_cpp_body_indent protected explicit_return_type "bool"
	nparams 4
	  param in name "p" explicit_type "char"
	  param in name "tag" explicit_type "char"
	  param in name "ignoreCase" explicit_type "bool"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " Return true if the next characters in the stream are any of the endTag sequences.
 Ignore case only works for english, and should only be relied on when comparing
 to English words: StringEqual( p, \"version\", true ) is fine."
      end

      attribute 156290 "errorString"
	class_attribute const_attribute protected explicit_type "char"
	multiplicity "[ TIXML_ERROR_STRING_COUNT ]"
	init_value "=
{
	\"No error\",
	\"Error\",
	\"Failed to open file\",
	\"Error parsing Element.\",
	\"Failed to read Element name\",
	\"Error reading Element value.\",
	\"Error reading Attributes.\",
	\"Error: empty tag.\",
	\"Error reading end tag.\",
	\"Error parsing Unknown.\",
	\"Error parsing Comment.\",
	\"Error parsing Declaration.\",
	\"Error document empty.\",
	\"Error null (0) or unexpected EOF found in input stream.\",
	\"Error parsing CDATA.\",
	\"Error when TiXmlDocument added to document, because TiXmlDocument can only be at the root.\",
}"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 144514 // location (<directional composition>)
	relation 144514 *-->
	  a role_name "location" protected
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 144514 // location (<directional composition>)
	  b parent class_ref 142338 // TiXmlCursor
      end

      attribute 156418 "userData"
	protected explicit_type "void"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "/ Field containing a generic user pointer
"
      end

      operation 165378 "IsAlpha"
	class_operation preserve_cpp_body_indent protected explicit_return_type "int"
	nparams 2
	  param in name "anyByte" explicit_type "byte"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

//static

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " None of these methods are reliable for any language except English.
 Good for approximation, not great for accuracy."
      end

      operation 165506 "IsAlphaNum"
	class_operation preserve_cpp_body_indent protected explicit_return_type "int"
	nparams 2
	  param in name "anyByte" explicit_type "byte"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//static

//static

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 165634 "ToLower"
	class_operation cpp_inline protected explicit_return_type "int"
	nparams 2
	  param in name "v" explicit_type "int"
	  param in name "encoding" type class_ref 142594 // TiXmlEncoding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
		if ( encoding == TIXML_ENCODING_UTF8 )
		{
			if ( v < 128 ) return tolower( v );
			return v;
		}
		else
		{
			return tolower( v );
		}
	};
"
	
	
	
	
      end

      operation 165762 "ConvertUTF32ToUTF8"
	class_operation preserve_cpp_body_indent protected explicit_return_type "void"
	nparams 3
	  param in name "input" explicit_type "ulong"
	  param inout name "output" explicit_type "char"
	  param inout name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//	0	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f
// 0x00
// 0x10
// 0x20
// 0x30
// 0x40
// 0x50
// 0x60
// 0x70	End of ASCII range
// 0x80 0x80 to 0xc1 invalid
// 0x90 
// 0xa0 
// 0xb0 
// 0xc0 0xc2 to 0xdf 2 byte
// 0xd0
// 0xe0 0xe0 to 0xef 3 byte
// 0xf0 0xf0 to 0xf4 4 byte, 0xf5 and higher invalid

//	0	1	2	3	4	5	6	7	8	9	a	b	c	d	e	f
// 0x00
// 0x10
// 0x20
// 0x30
// 0x40
// 0x50
// 0x60
// 0x70	End of ASCII range
// 0x80 0x80 to 0xc1 invalid
// 0x90 
// 0xa0 
// 0xb0 
// 0xc0 0xc2 to 0xdf 2 byte
// 0xd0
// 0xe0 0xe0 to 0xef 3 byte
// 0xf0 0xf0 to 0xf4 4 byte, 0xf5 and higher invalid

${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 165890 "TiXmlBase"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 145154 // TiXmlBase
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	
	
	
	
      end

      operation 166018 "operator ="
	private explicit_return_type "void"
	nparams 1
	  param in name "base" type class_ref 145154 // TiXmlBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment " not implemented."
      end

      class 145410 "Entity"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 156546 "str"
	  const_attribute public explicit_type "char"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 156674 "strLength"
	  public explicit_type "uint"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 156802 "chr"
	  public explicit_type "char"
	  cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 154370 "anonymous5"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 178946 "NUM_ENTITY"
	  public type class_ref 154370 // anonymous5
	  init_value " 5"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 179074 "MAX_ENTITY_LENGTH"
	  public type class_ref 154370 // anonymous5
	  init_value " 6

	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      class 145538 "anonymous3"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum  {
${items}};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 156930 "NUM_ENTITY"
	  public type class_ref 145538 // anonymous3
	  init_value " 5"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 157058 "MAX_ENTITY_LENGTH"
	  public type class_ref 145538 // anonymous3
	  init_value " 6

	"
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 144642 // entity (<directional composition>)
	relation 144642 *-->
	  a role_name "entity" multiplicity "[ NUM_ENTITY ]" init_value "= 
{
	{ \"&amp;\",  5, '&' },
	{ \"&lt;\",   4, '<' },
	{ \"&gt;\",   4, '>' },
	{ \"&quot;\", 6, '\\\"' },
	{ \"&apos;\", 6, '\\'' }
}" class_relation private
	    cpp default "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    classrelation_ref 144642 // entity (<directional composition>)
	  b parent class_ref 145410 // Entity
      end

      attribute 157186 "condenseWhiteSpace"
	class_attribute private explicit_type "bool"
	init_value "= true"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145794 "Rep"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 160642 "size"
	public explicit_type "size_type"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160770 "capacity"
	public explicit_type "size_type"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 160898 "str"
	public explicit_type "char"
	multiplicity "[1]"
	cpp_decl "    ${comment}${static}${thread_local}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 145922 "anonymous4"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Only used by Attribute::Query functions"
      attribute 161026 "TIXML_SUCCESS"
	public type class_ref 145922 // anonymous4
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161154 "TIXML_NO_ATTRIBUTE"
	public type class_ref 145922 // anonymous4
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161282 "TIXML_WRONG_TYPE"
	public type class_ref 145922 // anonymous4
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146050 "anonymous5"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 161410 "TIXML_NO_ERROR"
	public type class_ref 146050 // anonymous5
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161538 "TIXML_ERROR"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161666 "TIXML_ERROR_OPENING_FILE"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161794 "TIXML_ERROR_PARSING_ELEMENT"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 161922 "TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162050 "TIXML_ERROR_READING_ELEMENT_VALUE"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162178 "TIXML_ERROR_READING_ATTRIBUTES"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162306 "TIXML_ERROR_PARSING_EMPTY"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162434 "TIXML_ERROR_READING_END_TAG"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162562 "TIXML_ERROR_PARSING_UNKNOWN"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162690 "TIXML_ERROR_PARSING_COMMENT"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162818 "TIXML_ERROR_PARSING_DECLARATION"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 162946 "TIXML_ERROR_DOCUMENT_EMPTY"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163074 "TIXML_ERROR_EMBEDDED_NULL"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163202 "TIXML_ERROR_PARSING_CDATA"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163330 "TIXML_ERROR_DOCUMENT_TOP_ONLY"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163458 "TIXML_ERROR_STRING_COUNT"
	public type class_ref 146050 // anonymous5
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 146178 "anonymous6"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      attribute 163586 "NUM_ENTITY"
	public type class_ref 146178 // anonymous6
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 163714 "MAX_ENTITY_LENGTH"
	public type class_ref 146178 // anonymous6
	init_value " 6

	"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 154114 "anonymous2"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Only used by Attribute::Query functions"
      attribute 176386 "TIXML_SUCCESS"
	public type class_ref 154114 // anonymous2
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 176514 "TIXML_NO_ATTRIBUTE"
	public type class_ref 154114 // anonymous2
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 176642 "TIXML_WRONG_TYPE"
	public type class_ref 154114 // anonymous2
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end
  end

  deploymentview 134658 "TinyXML"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 142210 "tinystr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 142082 // TiXmlString
	class_ref 142210 // TiXmlOutStream
      end
    end

    artifact 142338 "tinyxml"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 142338 // TiXmlCursor
	class_ref 142466 // TiXmlVisitor
	class_ref 154114 // anonymous2
	class_ref 142594 // TiXmlEncoding
	class_ref 145154 // TiXmlBase
	class_ref 142722 // TiXmlNode
	class_ref 142850 // TiXmlAttribute
	class_ref 142978 // TiXmlAttributeSet
	class_ref 143106 // TiXmlElement
	class_ref 143234 // TiXmlComment
	class_ref 143362 // TiXmlText
	class_ref 143490 // TiXmlDeclaration
	class_ref 143618 // TiXmlUnknown
	class_ref 143746 // TiXmlDocument
	class_ref 143874 // TiXmlHandle
	class_ref 144002 // TiXmlPrinter
      end
    end

    artifact 142466 "TiXmlParsingData"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_elems
	class_ref 144130 // TiXmlParsingData
      end
    end
  end
end
