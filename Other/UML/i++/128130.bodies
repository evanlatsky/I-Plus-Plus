class CodingWindow
!!!128130.cpp!!!	loadQuestionData(in questionNumber : int) : void


    // Open the file for the current question
    std::ifstream questionFile("./Questions/" + std::to_string(questionNumber) + ".txt");
    
    // If it could not be opened, throw an exception
    if(!questionFile.is_open()) {
        // TODO: catch this exception!
        throw std::invalid_argument("Could not load question file for question " + std::to_string(questionNumber));
    }
    
    // Prepare variables
    std::string currentLine;
    int readingStage = -1;
    std::string instructionsText = "";
    std::vector<std::string> targetLinesOfCode;
    
    // Remove all the current lines of code to prevent duplicates
    availableLinesOfCode.clear();
    currentLinesOfCode.clear();
    
    // While the end of the file is not reached
    while(questionFile.good()) {

        // Read the current line, if it is empty, skip it
        getline(questionFile, currentLine);
        if(currentLine.empty()) {
            continue;
        }
        
        // Determine what vector to put the current line into
        if(currentLine == "[Target]") {
            readingStage = 0;            
        } else if(currentLine == "[Available]") {
            // Once all the target lines have been read in, set the number of target lines in the current lines crame to the number of target lines read in
            currentCodeFrame->setNumberOfTargetLines(targetLinesOfCode.size());
            readingStage = 1;            
        } else if(currentLine == "[Current]") {
            readingStage = 2;            
        } else if(currentLine == "[Instructions]") {
            readingStage = 3;            
        } else {
            
            // Read the current line in to the target lines vector
            if(readingStage == 0) {
                targetLinesOfCode.push_back(currentLine);
            }
            // Read the current line into the available lines vector, where [All] means all target lines and [None] means no lines
            else if(readingStage == 1) {
                // Only load the available lines if the current question is not solved yet
                if(!currentSequenceIsCorrect) {
                    // If the [ALL] keyword is used, copy all the target lines to the available lines, preserving the sequence ID
                    if(currentLine == "[All]") {
                        unsigned int sequenceID = 0;
                        for(std::string lineOfCode : targetLinesOfCode) {
                            availableLinesOfCode.push_back(new LineOfCode(lineOfCode, sequenceID));
                            sequenceID++;
                        }
                    }
                    // If the [None] keyword is used, the available lines stays empty
                    else if(currentLine == "[None]") {
                        continue;
                    }
                    // Otherwise, read input line-by line
                    else {
                        // If the current line is just a number, add the target line at that index as an available line, with that sequence ID
                        if(std::all_of(currentLine.begin(), currentLine.end(), ::isdigit)) {
                            unsigned int sequenceID = std::stoi(currentLine);
                            if(sequenceID < targetLinesOfCode.size()) {
                                availableLinesOfCode.push_back(new LineOfCode(targetLinesOfCode[sequenceID], sequenceID));
                            }
                        }
                        // Otherwise, add the current line as text with a sequence ID of -1 since this line is not part of the solution
                        else {
                            availableLinesOfCode.push_back(new LineOfCode(currentLine, -1));
                        }
                    }
                }
            }
            // Read the current line into the current lines vector, where [All] means all target lines and [None] means no lines
            else if(readingStage == 2) {
                // If the question is already solved or the [ALL] keyword is used, copy all the target lines to the current lines, preserving the sequence ID
                if((currentSequenceIsCorrect && currentLinesOfCode.empty()) || (!currentSequenceIsCorrect && currentLine == "[All]")) {
                    unsigned int sequenceID = 0;
                    for(std::string lineOfCode : targetLinesOfCode) {
                        currentLinesOfCode.push_back(new LineOfCode(lineOfCode, sequenceID));
                        sequenceID++;
                    }
                } 
                // Only load the available lines if the current question is not solved yet
                if(!currentSequenceIsCorrect) {
                    // If the [None] keyword is used, the current lines stays empty
                    if(currentLine == "[None]") {
                        continue;
                    }
                    // Otherwise, read input line-by line
                    else {
                        // If the current line is just a number, add the target line at that index as a current line, with that sequence ID
                        if(std::all_of(currentLine.begin(), currentLine.end(), ::isdigit)) {
                            unsigned int sequenceID = std::stoi(currentLine);
                            if(sequenceID < targetLinesOfCode.size()) {
                                currentLinesOfCode.push_back(new LineOfCode(targetLinesOfCode[sequenceID], sequenceID));
                            }
                        }
                        // Otherwise, add the current line as text with a sequence ID of -1 since this line is not part of the solution
                        else {
                            currentLinesOfCode.push_back(new LineOfCode(currentLine, -1));
                        }
                    }
                }
            }
            // Read the instructions text in to the instructions text string line by line
            if(readingStage == 3) {
                instructionsText += (instructionsText.empty() ? "" : "\n") + currentLine;
            }
            
        }
        
    }
    
    // Set the instructions label text to the read in instructions text
    instructionsLabel->SetText(instructionsText);
        
    // Close the question file
    questionFile.close();
    
!!!128258.cpp!!!	initializeLinesOfCode() : void

    
    // Remove all the current lines of code to prevent duplicates
    availableCodeFrame->removeAllLinesOfCode();
    currentCodeFrame->removeAllLinesOfCode();
    
    // The index of the current line
    int lineIndex = 0;
    
    // Add labels to the available lines and add all the available lines to the available code frame
    for(LineOfCode* currentAvailableLineOfCode : availableLinesOfCode) {
		auto lineLabel = sfg::Label::Create();
        currentAvailableLineOfCode->setLable(lineLabel, "LineOfCode");
        availableCodeFrame->addLineOfCodeAtEnd(currentAvailableLineOfCode);
        lineIndex++;
    }
    
    // Add labels to the current lines and add all the current lines to the current code frame
    for(LineOfCode* currentCurrentLineOfCode : currentLinesOfCode) {
		auto lineLabel = sfg::Label::Create();
        currentCurrentLineOfCode->setLable(lineLabel, "LineOfCode");
        currentCodeFrame->addLineOfCodeAtEnd(currentCurrentLineOfCode);
        lineIndex++;
    }
    
    // Reset the selected line position and insertion point to the start 
    availableCodeFrame->reInitialize();
    currentCodeFrame->reInitialize();
    
!!!128386.cpp!!!	updateActivatedLineMode() : bool

    
    // Activated line mode was just switched
    bool activatedLineModeWasJustSwitched = false;
    
    // Update using mouse if mouse controls are active
    if(useMouseControl) {
     
        // If the left mouse button is pressed
        if(Controller::mouseLeftIsPressed) {
            // If the activated line mode is not entered, enter it
            if(!isCurrentlyInActivatedLineMode) {
                // Only enter the activated line mode if the currently selected frome is not empty and the mouse is currently over it
                if((isCurrentlyInAvailableLinesFrame && isMouseOverAvailableCodeFrame() && !availableCodeFrame->isEmpty()) || (!isCurrentlyInAvailableLinesFrame && isMouseOverCurrentCodeFrame() && !currentCodeFrame->isEmpty())) {
                    isCurrentlyInActivatedLineMode = true;
                    activatedLineModeWasJustSwitched = true;
                }
            }
        }
        
        // If the left mouse button is released
        else if(Controller::mouseLeftIsReleased) {
            // If the activated line mode is entered
            if(isCurrentlyInActivatedLineMode) {
                // Only exit the activated line mode if the mouse is currently not over the non-selected frome (cancel line movement)
                if((isCurrentlyInAvailableLinesFrame && !CodingWindow::isMouseOverCurrentCodeFrame()) || (!isCurrentlyInAvailableLinesFrame && !CodingWindow::isMouseOverAvailableCodeFrame())) {
                    isCurrentlyInActivatedLineMode = false;
                    activatedLineModeWasJustSwitched = true;
                }
            }
        }
   
    }
    // Otherwise update using the keyboard
    else {
        
        // If the select key is pressed
        if(Controller::keySelectIsPressed) {
            // If the activated line mode is not entered, enter it
            if(!isCurrentlyInActivatedLineMode) {
                // Only enter the activated line mode if the currently selected frome is not empty
                if((isCurrentlyInAvailableLinesFrame && !availableCodeFrame->isEmpty()) || (!isCurrentlyInAvailableLinesFrame && !currentCodeFrame->isEmpty())) {
                    isCurrentlyInActivatedLineMode = true;
                    activatedLineModeWasJustSwitched = true;
                }
            }
        }
        
        // If the deselect key is pressed
        else if(Controller::keyDeselectIsPressed) {
            // If the activated line mode is entered, exit it (cancel line movement)
            if(isCurrentlyInActivatedLineMode) {
                isCurrentlyInActivatedLineMode = false;
                activatedLineModeWasJustSwitched = true;
            }
        }

    }
    
    // If there is currently an activated line
    if(isCurrentlyInActivatedLineMode) {
    
        // If the line was just activated, set the frame border color to indicate the activation has happened
        if(activatedLineModeWasJustSwitched) {
            // If the available lines frame is selected, this means an available line is being placed into the current lines frame
            if(isCurrentlyInAvailableLinesFrame) {
                mainDesktop.GetEngine().SetProperty("Frame#availableLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_ACTIVATED_LINE_COLOR));  
            } 
            // If the current lines frame is selected, this means a current line is being placed back into the available lines frame
            else {
                mainDesktop.GetEngine().SetProperty("Frame#currentLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_ACTIVATED_LINE_COLOR));
            }
        }
        
    }
    
    // Return true is the activated line mode was just entered
    return isCurrentlyInActivatedLineMode && activatedLineModeWasJustSwitched;
    
!!!128514.cpp!!!	updateCurrentlySelectedFrame() : void

    
    // Flag to determine if this is the first time the frames are updated
    static bool prev_isCurrentlyInActivatedLineMode = !isCurrentlyInActivatedLineMode;
        
    // Flag to indicate if the current frame was switched (true on the first time)
    bool frameWasJustSwitched = (prev_isCurrentlyInActivatedLineMode != isCurrentlyInActivatedLineMode);
        
    // Update using mouse if mouse controls are active
    if(useMouseControl) {
        
        // If activated line mode is not active and was not just switched, the currently selected frame can be switched
        if(!frameWasJustSwitched && !isCurrentlyInActivatedLineMode) {
        
            // Determine which frame the mouse if over
            if(isMouseOverAvailableCodeFrame()) {
                isCurrentlyInAvailableLinesFrame = true;
            } else if(isMouseOverCurrentCodeFrame()) {
                isCurrentlyInAvailableLinesFrame = false;
            }
            
            // Update the frame border colors if the active frame changed
            setActiveFrame(false);
        
        }
        
    }
    // Otherwise update using the keyboard
    else {
        
        // If no key was pressed and activated line mode status did not change, don't update anything
        if(prev_isCurrentlyInActivatedLineMode == isCurrentlyInActivatedLineMode) {
            if(!Controller::keyLeftIsPressed && !Controller::keyRightIsPressed) {
                return;
            }
        }
        
        // If activated line mode is not active, the currently selected frame can be switched
        if(!isCurrentlyInActivatedLineMode) {
            
            // If the left / right keys are pressed, move the currently selected frame between available and current lines
            if(Controller::keyLeftIsPressed && !isCurrentlyInAvailableLinesFrame) {
                isCurrentlyInAvailableLinesFrame = true;
                frameWasJustSwitched = true;
            } else if(Controller::keyRightIsPressed && isCurrentlyInAvailableLinesFrame) {
                isCurrentlyInAvailableLinesFrame = false;
                frameWasJustSwitched = true;
            }
            
        }
        
    }
    
    // If the currently selected frame was just switched and activated line mode is deactivated, update the frame border colors to their normal colors
    if(frameWasJustSwitched && !isCurrentlyInActivatedLineMode) {
        setActiveFrame(true);
    }
    
    // Keep track of the last activated line mode status
    prev_isCurrentlyInActivatedLineMode = isCurrentlyInActivatedLineMode;
    
!!!128642.cpp!!!	setActiveFrame(in forceUpdate : bool) : void

    
    // Flag to determine if this is the first time the frames are switched
    static bool prev_isCurrentlyInAvailableLinesFrame = !isCurrentlyInAvailableLinesFrame;
    
    // If need to force update or the active frames are switched, update the frame border colors
    if(forceUpdate || (prev_isCurrentlyInAvailableLinesFrame != isCurrentlyInAvailableLinesFrame)) {
    
        if(isCurrentlyInAvailableLinesFrame) {
            // Set the available lines frame border color to selected and current lines frame border color to default
            mainDesktop.GetEngine().SetProperty("Frame#availableLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_SELECTED_LINE_COLOR));
            mainDesktop.GetEngine().SetProperty("Frame#currentLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_DEFAULT_LINE_COLOR));            
        } else {
            // Set the available lines frame border color to default and current lines frame border color to selected
            mainDesktop.GetEngine().SetProperty("Frame#availableLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_DEFAULT_LINE_COLOR));
            mainDesktop.GetEngine().SetProperty("Frame#currentLinesFrame", "BorderColor", sf::Color(CODING_SCREEN_SELECTED_LINE_COLOR));
        }
    
    }
    
    // Keep track of the last active frame
    prev_isCurrentlyInAvailableLinesFrame = isCurrentlyInAvailableLinesFrame;
    
!!!128770.cpp!!!	checkIfCurrentCodeIsCorrect() : void

    
    // If the run button is pressed while the info window is open, don't do anything
    if(infoWindowIsOpen) {
        return;
    }
    
    // Check if the current code frame contains the correct sequence of lines to solve the question
    currentSequenceIsCorrect = currentCodeFrame->hasCorrectSequenceOfLines();
    //std::cout << "Correct: " << sequenceIsCorrect << std::endl;
    
    // If the current sequence was correct, indicate that the question was solved in the controller
    if(currentSequenceIsCorrect) {
        controller->setQuestionSolvedStatus(true, currentQuestionNumber);
    }
    
    // Open the info window
    openInfoWindow();
    
!!!128898.cpp!!!	openInfoWindow() : void

    
    // Remove the left click signal ID to always keep only one function assigned to the info button
    static int infoButtonSignalID = -1;
    infoButton->GetSignal(sfg::Widget::OnLeftClick).Disconnect(infoButtonSignalID);
    
    if(currentSequenceIsCorrect) {
        
        // Set the info frame color to green
        mainDesktop.GetEngine().SetProperty("Frame#infoFrame", "BorderColor", sf::Color(CODING_SCREEN_SELECTED_LINE_COLOR));
        
        // Set the info label text to indicate that the current code is correct
        infoLabel->SetText(CODING_SCREEN_INFO_CORRECT_TEXT);
        
        // Set the info button to close the whole coding window
        infoButtonSignalID = infoButton->GetSignal(sfg::Widget::OnLeftClick).Connect([this] {this->close();});
    
    } else {
        
        // Set the info frame color to red
        mainDesktop.GetEngine().SetProperty("Frame#infoFrame", "BorderColor", sf::Color(CODING_SCREEN_WARNING_COLOR));
        
        // Set the info label text to indicate that the current code is not correct
        infoLabel->SetText(CODING_SCREEN_INFO_INCORRECT_TEXT);
        
        // Set the info button to set the flag to close the coding info window
        infoButtonSignalID = infoButton->GetSignal(sfg::Widget::OnLeftClick).Connect([this] {this->hideInfoWindow();});
        
    }
    
    // Open the coding info window and set the flag to indicate that it's open to ignore keyboard controls and the run button
    mainDesktop.BringToFront(codingInfoWindow);
    codingInfoWindow->SetAllocation(sf::FloatRect((WIDTH - CODING_SCREEN_INFO_BOX_WIDTH) / 2, (HEIGHT - CODING_SCREEN_INFO_BOX_HEIGHT) / 2, CODING_SCREEN_INFO_BOX_WIDTH, CODING_SCREEN_INFO_BOX_HEIGHT));
    infoWindowIsOpen = true;
    
!!!129026.cpp!!!	hideInfoWindow() : void

    
    //mainDesktop.Remove(codingInfoWindow);
    codingInfoWindow->SetAllocation(sf::FloatRect(WIDTH, HEIGHT, CODING_SCREEN_INFO_BOX_WIDTH, CODING_SCREEN_INFO_BOX_HEIGHT));
    mainDesktop.BringToFront(codingWindow);
    mainDesktop.Refresh();
    infoWindowIsOpen = false;
    
!!!129154.cpp!!!	CodingWindow(inout _controller : Controller)

    
	// ==================== CREATE CODING WINDOW ====================

	// Create GUI for coding window
	codingWindow = sfg::Window::Create();
    
	// Create the main box
	auto mainBox = sfg::Box::Create(sfg::Box::Orientation::HORIZONTAL, WINDOW_PADDING);
    
	// Create the left and right box
	auto leftBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, WINDOW_PADDING);
	auto rightBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, WINDOW_PADDING);

    float boxWidth = ((WIDTH - WINDOW_MARGIN_X * 2) - WINDOW_PADDING) / 2 - WINDOW_PADDING;
	leftBox->SetRequisition(sf::Vector2f(boxWidth, 0.0f));
	rightBox->SetRequisition(sf::Vector2f(boxWidth, 0.0f));
    
	// ==================== SET UP FONT(S) ====================

    // Set up the default font for all the labels
	mainDesktop.GetEngine().GetResourceManager().SetDefaultFont(consolaFont);
    
    // Set the font size of all elements
    mainDesktop.GetEngine().SetProperty("Label#LineOfCode", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
	mainDesktop.GetEngine().SetProperty("Frame#availableLinesFrame", "FontSize", GUI_WINDOW_TITLE_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Frame#currentLinesFrame", "FontSize", GUI_WINDOW_TITLE_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Frame#controlsFrame", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Label#controlsLabel", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Frame#instructionsFrame", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Label#instructionsLabel", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Button#controlButton", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Frame#infoFrame", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Label#infoLable", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("Button#infoButton", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    mainDesktop.GetEngine().SetProperty("CheckButton#mouseControlCheckButton", "FontSize", GUI_WINDOW_DEFAULT_FONT_SIZE);
    
    // Set the colors for the run and exit buttons
    mainDesktop.GetEngine().SetProperty("Button#runButton", "Color", sf::Color(CODING_SCREEN_SELECTED_LINE_COLOR));
    mainDesktop.GetEngine().SetProperty("Button#exitButton", "Color", sf::Color(CODING_SCREEN_WARNING_COLOR));
    //mainDesktop.GetEngine().SetProperty("Button#runButton", "BorderColor", sf::Color(CODING_SCREEN_SELECTED_LINE_COLOR));
    //mainDesktop.GetEngine().SetProperty("Button#exitButton", "BorderColor", sf::Color(CODING_SCREEN_WARNING_COLOR));
    
	// ==================== AVAILABLE LINES ====================

	// Create the available lines frame
	auto availableLinesFrame = sfg::Frame::Create("Available Lines");
	availableLinesFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    availableLinesFrame->SetId("availableLinesFrame");
    
	// Create the available lines scrollbox and scrollwindow
	auto availableLinesScrollBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, WINDOW_PADDING);
	auto availableLinesScrollWindow = sfg::ScrolledWindow::Create();
	availableLinesScrollWindow->SetScrollbarPolicy(sfg::ScrolledWindow::VERTICAL_AUTOMATIC);

	// Add the available lines scrollbox to the available lines scrollwindow, add that to the frame, and add that to the main box
	availableLinesScrollWindow->AddWithViewport(availableLinesScrollBox);
	availableLinesFrame->Add(availableLinesScrollWindow);
	leftBox->Pack(availableLinesFrame, true, true);

    // Create the CodeFrame object for the available lines of code
    availableCodeFrame = new CodeFrame(true, availableLinesScrollBox);
    
	// ==================== CURRENT LINES ====================

	// Create the current lines frame
	auto currentLinesFrame = sfg::Frame::Create("Current Lines");
	currentLinesFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    currentLinesFrame->SetId("currentLinesFrame");
    
	// Create the current lines scrollbox and scrollwindow
	auto currentLinesScrollBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, WINDOW_PADDING);
	auto currentLinesScrollWindow = sfg::ScrolledWindow::Create();
	currentLinesScrollWindow->SetScrollbarPolicy(sfg::ScrolledWindow::VERTICAL_AUTOMATIC);
    
	// Add the current lines scrollbox to the current lines scrollwindow, add that to the frame, and add that to the main box
	currentLinesScrollWindow->AddWithViewport(currentLinesScrollBox);
	currentLinesFrame->Add(currentLinesScrollWindow);
	rightBox->Pack(currentLinesFrame, true, true);

    // Create the CodeFrame object for the current lines of code
    currentCodeFrame = new CodeFrame(false, currentLinesScrollBox);
    
	// ==================== INSTRUCTIONS ====================

	// Create the instructions frame
	auto instructionsFrame = sfg::Frame::Create("Instructions");
	instructionsFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
	instructionsFrame->SetRequisition(sf::Vector2f(0.0f,CODING_SCREEN_BOTTOM_FRAMES_HEIGHT));
    instructionsFrame->SetId("instructionsFrame");
    
	// Create the instructions label
    instructionsLabel = sfg::Label::Create();
    instructionsLabel->SetText("You got this!");
	instructionsLabel->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    instructionsLabel->SetId("instructionsLabel");
    
    // Add the instructions label to the instructions frame and add instructions frame to the left box
    instructionsFrame->Add(instructionsLabel);
	leftBox->Pack(instructionsFrame, false, false);
    
	// ==================== CONTROLS ====================
    
    // Create the controls outer box to hold both the controls frame and buttons box
	auto controlsOuterBox = sfg::Box::Create(sfg::Box::Orientation::HORIZONTAL, WINDOW_PADDING);
    
    // Create the controls box to hold both left and right controls labels
	auto controlsBox = sfg::Box::Create();
    
	// Create the controls frame
	auto controlsFrame = sfg::Frame::Create("Controls");
	controlsFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
	controlsFrame->SetRequisition(sf::Vector2f(0.0f, CODING_SCREEN_BOTTOM_FRAMES_HEIGHT));
    controlsFrame->SetId("controlsFrame");
    
	// Create the left controls label and add it to the controls box
    auto controlsLeftLabel = sfg::Label::Create();
    controlsLeftLabel->SetText(CODING_SCREEN_CONTROLS_LEFT_TEXT);
	controlsLeftLabel->SetAlignment(sf::Vector2f(0.0f, 0.5f));
    controlsLeftLabel->SetId("controlsLabel");
    controlsBox->Pack(controlsLeftLabel, true, true);
    
	// Create the right controls label and add it to the controls box
    auto controlsRightLabel = sfg::Label::Create();
    controlsRightLabel->SetText(CODING_SCREEN_CONTROLS_RIGHT_TEXT);
	controlsRightLabel->SetAlignment(sf::Vector2f(1.0f, 0.5f));
    controlsRightLabel->SetId("controlsLabel");
    controlsBox->Pack(controlsRightLabel, true, true);
    
    // Add the controls box to the controls frame and add that to the controls outer box
    controlsFrame->Add(controlsBox);
    controlsOuterBox->Pack(controlsFrame, true, true);
    
    // Create the controls buttons frame to hold the controls buttons box
	auto controlsButtonsFrame = sfg::Frame::Create("Actions");
	controlsButtonsFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    controlsButtonsFrame->SetId("controlsFrame");
    
    // Create the controls buttons box to hold the run and exit buttons
	auto controlsButtonBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, 1);

    // Create the run button and add it to the controls buttons box
    auto runButton = sfg::Button::Create("Run");
    runButton->SetId("runButton");
    runButton->GetSignal(sfg::Widget::OnLeftClick).Connect([this] {this->checkIfCurrentCodeIsCorrect();});
    controlsButtonBox->Pack(runButton, true, true);
    
    // Create the exit button and add it to the controls buttons box
    auto exitButton = sfg::Button::Create("Exit");
    exitButton->SetId("exitButton");
    exitButton->GetSignal(sfg::Widget::OnLeftClick).Connect([this] {this->close();});
    controlsButtonBox->Pack(exitButton, true, true);
    
    auto mouseControlCheckButton = sfg::CheckButton::Create("Use mouse");
    mouseControlCheckButton->SetId("mouseControlCheckButton");
    mouseControlCheckButton->SetActive(true);
    mouseControlCheckButton->GetSignal(sfg::ToggleButton::OnToggle).Connect([this, &mouseControlCheckButton] {
		this->useMouseControl = !this->useMouseControl;
	});
    controlsButtonBox->Pack(mouseControlCheckButton, true, true);
    
    // Add the controls button box to the controls buttons frame and add that to the controls outer box and add that to the right box
    controlsButtonsFrame->Add(controlsButtonBox);
    controlsOuterBox->Pack(controlsButtonsFrame, false, false);
	rightBox->Pack(controlsOuterBox, false, false);
    
	// ==================== SET UP CODING WINDOW ====================
    
	// Add left and right boxes to the main box
	mainBox->Pack(leftBox, true, false);
	mainBox->Pack(rightBox, true, false);

	// Add the main box to the coding window
	codingWindow->Add(mainBox);
   
	// Disable resizing
	codingWindow->SetStyle(codingWindow->GetStyle() ^ sfg::Window::TITLEBAR);
	codingWindow->SetStyle(codingWindow->GetStyle() ^ sfg::Window::RESIZE);

    // Add the coding window to the coding desktop to enable setting widget preperties
	mainDesktop.Add(codingWindow);

    // ==================== CREATE CODING INFO WINDOW ====================

	// Create GUI for coding window
	codingInfoWindow = sfg::Window::Create();
    
	// Create the main info box
	auto mainInfoBox = sfg::Box::Create(sfg::Box::Orientation::VERTICAL, WINDOW_PADDING);
    
    // Create the info frame to hold the info label and add it to the info box
	auto infoFrame = sfg::Frame::Create("Info");
	infoFrame->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    infoFrame->SetId("infoFrame");
    mainInfoBox->Pack(infoFrame, true, true);

    // Create the info label and add it to the info frame
	infoLabel = sfg::Label::Create();
	infoLabel->SetAlignment(sf::Vector2f(0.5f, 0.5f));
    infoLabel->SetId("infoLable");
    infoFrame->Add(infoLabel);
    
    // Create the continue button and add it to the main info box
    infoButton = sfg::Button::Create("Continue");
    infoButton->SetId("infoButton");
    mainInfoBox->Pack(infoButton, false, true);
    
	// Add the main info box to the coding info window
	codingInfoWindow->Add(mainInfoBox);
   
	// Disable resizing
	codingInfoWindow->SetStyle(codingInfoWindow->GetStyle() ^ sfg::Window::TITLEBAR);
	codingInfoWindow->SetStyle(codingInfoWindow->GetStyle() ^ sfg::Window::RESIZE);
    
    // Add the coding info window to the coding desktop to enable setting widget preperties, hiding it because it is now needed yet
	mainDesktop.Add(codingInfoWindow);
    //hideInfoWindow();
    
	// ==================== INITIALIZATION ====================
    
    // Temporarly show the coding window to get the correct on-screen positions
    show();
    
    // Get the layout rectangles of the available and current lines frames for mouse input
    availableLinesOfCodeRect = availableLinesFrame->GetAllocation();
    availableLinesOfCodeRect.left += availableLinesFrame->GetAbsolutePosition().x;
    availableLinesOfCodeRect.top += availableLinesFrame->GetAbsolutePosition().y;
    currentLinesOfCodeRect = currentLinesFrame->GetAllocation();
    currentLinesOfCodeRect.left += currentLinesFrame->GetAbsolutePosition().x;
    currentLinesOfCodeRect.top += currentLinesFrame->GetAbsolutePosition().y;
    
    // Prepare coding window
    initializeCodingWindowForNewQuestion(0, true);
    
    // Get the line dimensions, only needed once
    availableCodeFrame->initialize(availableLinesScrollWindow);
    currentCodeFrame->initialize(currentLinesScrollWindow);
    
    // Hide the window when it is first created
    hide();
    
!!!129282.cpp!!!	~CodingWindow()

	// TODO Implement destructor
!!!129410.cpp!!!	initializeCodingWindowForNewQuestion(in questionNumber : int, in firstTimeOpeningCodingWindow : bool) : void


    currentQuestionNumber = questionNumber;

    // Get the solved status of the current question
    currentSequenceIsCorrect = controller->getQuestionSolvedStatus(currentQuestionNumber);
    
    // Static variable to keep track of the previous question number
    static int prev_questionNumber = -1;
    
    // Only load lines and re-initialize if the previous question was different than the current one or this is the first time the coding window is opened
    if(questionNumber != prev_questionNumber || firstTimeOpeningCodingWindow) {
    
        // By default, the coding window starts with the available lines frame and line 0 being selected
        isCurrentlyInAvailableLinesFrame = true;
        isCurrentlyInActivatedLineMode = false;
        
        // Load the lines of code for the current question
        loadQuestionData(questionNumber);
        
        // Add all the available and current lines of code
        initializeLinesOfCode();
    
    }
    
    // Record the previous question number
    prev_questionNumber = questionNumber;
    
!!!129538.cpp!!!	isMouseOverAvailableCodeFrame() : bool

    return availableLinesOfCodeRect.contains(Controller::mousePosition);
!!!129666.cpp!!!	isMouseOverCurrentCodeFrame() : bool

    return currentLinesOfCodeRect.contains(Controller::mousePosition);
!!!129794.cpp!!!	update(in deltaTime : float) : void

    
    // Only update the main coding window if the info window is closed
    if(!infoWindowIsOpen) {
        
        // Handle entering/exiting activated line mode
        bool didJustEnterActivatedLineMode = updateActivatedLineMode();
        
        // Handle switching the currently selected frame
        updateCurrentlySelectedFrame();
        
        // Update the code frames to handle selection and movement of lines (can move lines only if activated line mode was not entered on this frame)
        availableCodeFrame->update(!didJustEnterActivatedLineMode);
        currentCodeFrame->update(!didJustEnterActivatedLineMode);
        
        // If the action key was pressed in while out of activated lines mode, check if the current code frame contains the correct sequence of lines to solve the question
        if(!isCurrentlyInActivatedLineMode && Controller::keyActionIsPressed) {
            checkIfCurrentCodeIsCorrect();
        }

    }
    // If the info window is open, keep it info window in the front
    else {
        mainDesktop.BringToFront(codingInfoWindow);
        
        // If the action key was pressed, close the info window if the current code is not correct and the whole coding window if it is correct
        if(Controller::keyActionIsPressed) {
            if(currentSequenceIsCorrect) {
                close();
            } else {
                hideInfoWindow();
            }
        }
        
    }
    
    // If the escape key is pressed, exit
    if(Controller::keyEscapeIsPressed) {
        close();
    }
    
	// Update the coding window GUI to keep it interactive
    GUIWindow::update(deltaTime);
    
!!!129922.cpp!!!	updateEvent(in event : sf::Event) : void

	// Update the coding window GUI with new user input events
	GUIWindow::updateEvent(event);
!!!130050.cpp!!!	draw(inout window : sf::RenderWindow) : void

        
    // If the screen is not shown yet (its not in the correct position on screen), show it before drawing
    if(!isShown) {
        show();
    }
    
	// Draw all the GUI element to the window
	GUIWindow::draw(window);
    availableCodeFrame->draw(window);
    currentCodeFrame->draw(window);
    
!!!144258.cpp!!!	show() : void

        
    // Static variable to keep track of the previous question number
    static int prev_questionNumber = -1;
    
    // If the game state was switched, the last question state becomes invalid
    if(controller->gameStateDidChage_CodingWindow) {
        prev_questionNumber = -1;
        infoWindowWasOpenOnHide = false;
        controller->gameStateDidChage_CodingWindow = false;
    }
    
    // Get the solved status of the current question
    currentSequenceIsCorrect = controller->getQuestionSolvedStatus(currentQuestionNumber);
    
    // Set the correct position and size of the coding window to be on screen
	codingWindow->SetAllocation(sf::FloatRect(WINDOW_MARGIN_X, WINDOW_MARGIN_Y, WIDTH - WINDOW_MARGIN_X * 2, HEIGHT - WINDOW_MARGIN_Y * 2));
    
    // If the question is already solved, open the info window to indicate so and prevent re-solving the question
    // This way, once a question is solved, the coding window just shows that it was solved, preventing further interaction
    // Also, if the coding window was open when the coding window was being hidded (either on closing or on overlaying another GUI window on top) 
    // and the same question is reterned to, open the info window again (restore its state)
    if(currentSequenceIsCorrect || (infoWindowWasOpenOnHide && currentQuestionNumber == prev_questionNumber)) {
        openInfoWindow();
    }
    // Otherwise, the info window is hidden as the start
    else {
        hideInfoWindow();
    }
    
    // Record the previous question number
    prev_questionNumber = currentQuestionNumber;
    
    // Set the flag
    isShown = true;
    
!!!144386.cpp!!!	hide() : void

    
    // If the window is already hidden, don't do anything
    if(!isShown) {
        return;
    }
    
    // Record if the info window was oben before hiding the coding window
    // Required to restore the info window's state the next time the coding window is opened to the same question
    infoWindowWasOpenOnHide = infoWindowIsOpen;
    
    // Hide the info window so it does now show up the next time the coding window is opened
    hideInfoWindow();
    
    // Hide the coding window by moving it off-screen
	codingWindow->SetAllocation(sf::FloatRect(WIDTH, HEIGHT, WIDTH - WINDOW_MARGIN_X * 2, HEIGHT - WINDOW_MARGIN_Y * 2));
    
    // Clear the flag
    isShown = false;
    
!!!144514.cpp!!!	close() : void

    
    // Hide the window
    hide();
    
    // Hide the coding window
    controller->codingWindowIsOpen = false;
