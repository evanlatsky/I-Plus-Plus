class TiXmlDeclaration
!!!192002.cpp!!!	TiXmlDeclaration(in _version : std::string, in _encoding : std::string, in _standalone : std::string)

	version = _version;
	encoding = _encoding;
	standalone = _standalone;
!!!192130.cpp!!!	TiXmlDeclaration(in _version : char, in _encoding : char, in _standalone : char)

	version = _version;
	encoding = _encoding;
	standalone = _standalone;
!!!192258.cpp!!!	TiXmlDeclaration(in copy : TiXmlDeclaration)

	copy.CopyTo( this );	
!!!192386.cpp!!!	operator =(in copy : TiXmlDeclaration) : TiXmlDeclaration

	Clear();
	copy.CopyTo( this );
	return *this;
!!!193026.cpp!!!	Clone() : TiXmlNode
	
	TiXmlDeclaration* clone = new TiXmlDeclaration();

	if ( !clone )
		return 0;

	CopyTo( clone );
	return clone;
!!!193154.cpp!!!	Print(inout cfile : FILE, in depth : int, inout str : TIXML_STRING) : void

	if ( cfile ) fprintf( cfile, "<?xml " );
	if ( str )	 (*str) += "<?xml ";

	if ( !version.empty() ) {
		if ( cfile ) fprintf (cfile, "version=\"%s\" ", version.c_str ());
		if ( str ) { (*str) += "version=\""; (*str) += version; (*str) += "\" "; }
	}
	if ( !encoding.empty() ) {
		if ( cfile ) fprintf (cfile, "encoding=\"%s\" ", encoding.c_str ());
		if ( str ) { (*str) += "encoding=\""; (*str) += encoding; (*str) += "\" "; }
	}
	if ( !standalone.empty() ) {
		if ( cfile ) fprintf (cfile, "standalone=\"%s\" ", standalone.c_str ());
		if ( str ) { (*str) += "standalone=\""; (*str) += standalone; (*str) += "\" "; }
	}
	if ( cfile ) fprintf( cfile, "?>" );
	if ( str )	 (*str) += "?>";
!!!193410.cpp!!!	Parse(in p : char, inout data : TiXmlParsingData, in _encoding : TiXmlEncoding) : char

	p = SkipWhiteSpace( p, _encoding );
	// Find the beginning, find the end, and look for
	// the stuff in-between.
	TiXmlDocument* document = GetDocument();
	if ( !p || !*p || !StringEqual( p, "<?xml", true, _encoding ) )
	{
		if ( document ) document->SetError( TIXML_ERROR_PARSING_DECLARATION, 0, 0, _encoding );
		return 0;
	}
	if ( data )
	{
		data->Stamp( p, _encoding );
		location = data->Cursor();
	}
	p += 5;

	version = "";
	encoding = "";
	standalone = "";

	while ( p && *p )
	{
		if ( *p == '>' )
		{
			++p;
			return p;
		}

		p = SkipWhiteSpace( p, _encoding );
		if ( StringEqual( p, "version", true, _encoding ) )
		{
			TiXmlAttribute attrib;
			p = attrib.Parse( p, data, _encoding );		
			version = attrib.Value();
		}
		else if ( StringEqual( p, "encoding", true, _encoding ) )
		{
			TiXmlAttribute attrib;
			p = attrib.Parse( p, data, _encoding );		
			encoding = attrib.Value();
		}
		else if ( StringEqual( p, "standalone", true, _encoding ) )
		{
			TiXmlAttribute attrib;
			p = attrib.Parse( p, data, _encoding );		
			standalone = attrib.Value();
		}
		else
		{
			// Read over whatever it is.
			while( p && *p && *p != '>' && !IsWhiteSpace( *p ) )
				++p;
		}
	}
	return 0;
!!!193794.cpp!!!	Accept(inout visitor : TiXmlVisitor) : bool

	return visitor->Visit( *this );
!!!193922.cpp!!!	CopyTo(inout target : TiXmlDeclaration) : void

	TiXmlNode::CopyTo( target );

	target->version = version;
	target->encoding = encoding;
	target->standalone = standalone;
!!!194050.cpp!!!	StreamIn(inout in : std::istream, inout tag : TIXML_STRING) : void

	while ( in->good() )
	{
		int c = in->get();
		if ( c <= 0 )
		{
			TiXmlDocument* document = GetDocument();
			if ( document )
				document->SetError( TIXML_ERROR_EMBEDDED_NULL, 0, 0, TIXML_ENCODING_UNKNOWN );
			return;
		}
		(*tag) += (char) c;

		if ( c == '>' )
		{
			// All is well.
			return;
		}
	}
